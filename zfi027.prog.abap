REPORT ZFI027.

*&---------------------------------------------------------------------*
*& Report  ZMMR035
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
TYPE-POOLS:SLIS.

TABLES: T001,T001W,MARA,MARD.
"MB5B获取数据用类型定义
TYPES : BEGIN OF STYPE_TOTALS_FLAT,
          MATNR        LIKE      MBEW-MATNR,
          MAKTX        LIKE      MAKT-MAKTX,
          BWKEY        LIKE      MBEW-BWKEY,
          WERKS        LIKE      MSEG-WERKS,
          CHARG        LIKE      MSEG-CHARG,
          SOBKZ        LIKE      MSLB-SOBKZ,
          NAME1        LIKE      T001W-NAME1,               "n999530

          START_DATE   LIKE      SY-DATLO,
          END_DATE     LIKE      SY-DATLO,

          ANFMENGE(09) TYPE P    DECIMALS 3,
          MEINS        LIKE      MARA-MEINS,
          SOLL(09)     TYPE P    DECIMALS 3,
          HABEN(09)    TYPE P    DECIMALS 3,
          ENDMENGE(09) TYPE P    DECIMALS 3.

TYPES:    ANFWERT(09)   TYPE P    DECIMALS 2,
          WAERS         LIKE T001-WAERS,
          SOLLWERT(09)  TYPE P    DECIMALS 2,
          HABENWERT(09) TYPE P    DECIMALS 2,
          ENDWERT(09)   TYPE P    DECIMALS 2,
          COLOR         TYPE      SLIS_T_SPECIALCOL_ALV,
          END OF STYPE_TOTALS_FLAT.
"从MB5B获取汇总数据用内表和工作区
DATA: G_T_TOTALS_FLAT TYPE STANDARD TABLE OF STYPE_TOTALS_FLAT,
      G_S_TOTALS_FLAT LIKE LINE OF G_T_TOTALS_FLAT.

TYPES : BEGIN OF STYPE_MB5B_ADD,
          DUMMY(01) TYPE C,
        END OF STYPE_MB5B_ADD.

TYPES : BEGIN OF STYPE_MSEG_LEAN,
          MBLNR        LIKE      MKPF-MBLNR,
          MJAHR        LIKE      MKPF-MJAHR,
          VGART        LIKE      MKPF-VGART,
          BLART        LIKE      MKPF-BLART,
          BUDAT        LIKE      MKPF-BUDAT,
          CPUDT        LIKE      MKPF-CPUDT,
          CPUTM        LIKE      MKPF-CPUTM,
          USNAM        LIKE      MKPF-USNAM,
* process 'goods receipt/issue slip' as hidden field        "n450596
          XABLN        LIKE      MKPF-XABLN,                "n450596

          LBBSA        LIKE      T156M-LBBSA,
          BWAGR        LIKE      T156S-BWAGR,
          BUKRS        LIKE      T001-BUKRS,

          BELNR        LIKE      BKPF-BELNR,
          GJAHR        LIKE      BKPF-GJAHR,
          BUZEI        LIKE      BSEG-BUZEI,
          HKONT        LIKE      BSEG-HKONT,

          WAERS        LIKE      MSEG-WAERS,
          ZEILE        LIKE      MSEG-ZEILE,
          BWART        LIKE      MSEG-BWART,
          MATNR        LIKE      MSEG-MATNR,
          WERKS        LIKE      MSEG-WERKS,
          LGORT        LIKE      MSEG-LGORT,
          CHARG        LIKE      MSEG-CHARG,
          BWTAR        LIKE      MSEG-BWTAR,
          KZVBR        LIKE      MSEG-KZVBR,
          KZBEW        LIKE      MSEG-KZBEW,
          SOBKZ        LIKE      MSEG-SOBKZ,
          KZZUG        LIKE      MSEG-KZZUG,
          BUSTM        LIKE      MSEG-BUSTM,
          BUSTW        LIKE      MSEG-BUSTW,
          MENGU        LIKE      MSEG-MENGU,
          WERTU        LIKE      MSEG-WERTU,
          SHKZG        LIKE      MSEG-SHKZG,
          MENGE        LIKE      MSEG-MENGE,
          MEINS        LIKE      MSEG-MEINS,
          DMBTR        LIKE      MSEG-DMBTR,
          DMBUM        LIKE      MSEG-DMBUM,
          XAUTO        LIKE      MSEG-XAUTO,
          KZBWS        LIKE      MSEG-KZBWS,
          XOBEW        LIKE      MSEG-XOBEW,
          RETAIL(01)   TYPE  C,
          OIGLCALC(01) TYPE  C,
          OIGLSKU(07)  TYPE  P  DECIMALS 3,
          INSMK        LIKE      MSEG-INSMK,
          SMBLN        LIKE      MSEG-SMBLN,    " No. doc
          SJAHR        LIKE      MSEG-SJAHR,    " Year          "n497992
          SMBLP        LIKE      MSEG-SMBLP.    " Item in doc
        INCLUDE TYPE STYPE_MB5B_ADD.
TYPES : END OF STYPE_MSEG_LEAN.

TYPES : BEGIN OF STYPE_BELEGE,
          BWKEY LIKE MBEW-BWKEY.
        INCLUDE TYPE STYPE_MSEG_LEAN.
TYPES :   FARBE_PRO_FELD      TYPE      SLIS_T_SPECIALCOL_ALV,
          FARBE_PRO_ZEILE(03) TYPE C.
TYPES : END OF STYPE_BELEGE.

"从MB5B获取物料移动详细数据用内表和工作区
DATA: G_T_BELEGE1 TYPE STANDARD TABLE OF STYPE_BELEGE,
      G_S_BELEGE1 LIKE LINE OF G_T_BELEGE1,
      G_T_BELEGE  TYPE STANDARD TABLE OF STYPE_BELEGE,
      G_S_BELEGE  LIKE LINE OF G_T_BELEGE.
"展示ALV用类型定义
TYPES: BEGIN OF TY_ALV,
         MARK     TYPE C,            "标记位
         MATNR    TYPE MARA-MATNR,   "物料号
         MAKTX    TYPE MAKT-MAKTX,   "物料描述
         ZGZLX    TYPE CHAR20,       "钢种
         Z_BAT_WJ TYPE ATWRT,     "外径
         Z_BAT_BH TYPE ATWRT,     "壁厚
         BUKRS    TYPE T001-BUKRS,   "公司代码
         WERKS    TYPE T001W-WERKS,  "工厂
         KONTS    TYPE T030-KONTS,   "科目
         TXT50    TYPE SKAT-TXT50,   "科目描述
         LGORT    TYPE MARD-LGORT,   "库位
         CHARG    TYPE MSEG-CHARG,   "批次
         BWTAR    TYPE MBEW-BWTAR,   "物料评估-评估类型
*         MVGRP    TYPE ZZT_MVGP-MVGRP, "移动组（自定义） HANDWY
         SOBKZ    TYPE MSEG-SOBKZ,   "移动标识

         BMENG    TYPE MSEG-MENGE,   "期初库存
         BAVPR    TYPE MSEG-DMBTR,   "期初平均单位成本
         BDMBT    TYPE MSEG-DMBTR,   "期初金额
         "
         SIMNG    TYPE MSEG-MENGE,   "入库总数量'.
         SIAVP    TYPE MSEG-DMBTR,   "入库平均单位成本
         SIDMB    TYPE MSEG-DMBTR,   "入库金额'.
         "
         DMBTR_S  TYPE MSEG-DMBTR, "差异分摊（借）
         DMBTR_H  TYPE MSEG-DMBTR, "差异分摊（贷）
         "
         IMMNG    TYPE MSEG-MENGE,   "采购入库数量'.
         IMAVP    TYPE MSEG-DMBTR,   "采购入库平均单位成本
         IMDMB    TYPE MSEG-DMBTR,   "采购入库金额'.
         "
         IDMNG    TYPE MSEG-MENGE,   "调拨入库数量'.
         IDAVP    TYPE MSEG-DMBTR,   "调拨入库平均单位成本
         IDDMB    TYPE MSEG-DMBTR,   "调拨入库金额'.
         "
         IWMNG    TYPE MSEG-MENGE,   "委外加工收回数量'.
         IWAVP    TYPE MSEG-DMBTR,   "委外加工收回平均单位成本
         IWDMB    TYPE MSEG-DMBTR,   "委外加工收回金额'.
         "
         IPMNG    TYPE MSEG-MENGE,   "盘盈数量'.
         IPAVP    TYPE MSEG-DMBTR,   "盘盈平均单位成本
         IPDMB    TYPE MSEG-DMBTR,   "盘盈金额'.
         "
         IHMNG    TYPE MSEG-MENGE,   "生产回收数量'.
         IHAVP    TYPE MSEG-DMBTR,   "生产回收平均单位成本
         IHDMB    TYPE MSEG-DMBTR,   "生产回收金额'.
         "
         ICMNG    TYPE MSEG-MENGE,   "成品转入数量'.
         ICAVP    TYPE MSEG-DMBTR,   "成品转入平均单位成本
         ICDMB    TYPE MSEG-DMBTR,   "成品转入金额'.
         "
         IGMNG    TYPE MSEG-MENGE,   "改制品转入数量'.
         IGAVP    TYPE MSEG-DMBTR,   "改制品转入平均单位成本'
         IGDMB    TYPE MSEG-DMBTR,   "改制品转入金额'.
         "
         IJMNG    TYPE MSEG-MENGE,   "受托加工入库数量'.
         IJAVP    TYPE MSEG-DMBTR,   "受托加工入库平均单位成本
         IJDMB    TYPE MSEG-DMBTR,   "受托加工入库金额'.
         "
         IRMNG    TYPE MSEG-MENGE,   "生产入库数量'.
         IRAVP    TYPE MSEG-DMBTR,   "生产入库平均单位成本
         IRDMB    TYPE MSEG-DMBTR,   "生产入库金额'.
         "
         ILMNG    TYPE MSEG-MENGE,   "加工来料数量'.'.
         ILAVP    TYPE MSEG-DMBTR,   "加工来料平均单位成本
         ILDMB    TYPE MSEG-DMBTR,   "加工来料金额'.
         "
         IBMNG    TYPE MSEG-MENGE,   "期初入库数量'.'.
         IBAVP    TYPE MSEG-DMBTR,   "期初入库平均单位成本
         IBDMB    TYPE MSEG-DMBTR,   "期初入库金额'.
         "
         SOMNG    TYPE MSEG-MENGE,   "出库总数量'.
         SOAVP    TYPE MSEG-DMBTR,   "出库平均单位成本
         SODMB    TYPE MSEG-DMBTR,   "出库金额'.
         "
         ODMNG    TYPE MSEG-MENGE,   "调拨出库数量'.
         ODAVP    TYPE MSEG-DMBTR,   "调拨出库平均单位成本
         ODDMB    TYPE MSEG-DMBTR,   "调拨出库金额'.

         ORMNG    TYPE MSEG-MENGE,   "生产领用数量'.
         ORAVP    TYPE MSEG-DMBTR,   "生产领用平均单位成本
         ORDMB    TYPE MSEG-DMBTR,   "生产领用金额'.
         "
         OYMNG    TYPE MSEG-MENGE,   "部门领用数量'.
         OYAVP    TYPE MSEG-DMBTR,   "部门领用平均单位成本
         OYDMB    TYPE MSEG-DMBTR,   "部门领用金额'.
         "
         OXMNG    TYPE MSEG-MENGE,   "销售出库数量'.
         OXAVP    TYPE MSEG-DMBTR,   "销售出库平均单位成本
         OXDMB    TYPE MSEG-DMBTR,   "销售出库金额'.
         "
         OWMNG    TYPE MSEG-MENGE,   "委外加工数量'.
         OWAVP    TYPE MSEG-DMBTR,   "委外加工平均单位成本
         OWDMB    TYPE MSEG-DMBTR,   "委外加工金额'.
         "
         OPMNG    TYPE MSEG-MENGE,   "盘亏数量'.
         OPAVP    TYPE MSEG-DMBTR,   "盘亏平均单位成本
         OPDMB    TYPE MSEG-DMBTR,   "盘亏金额'.
         "
         OFMNG    TYPE MSEG-MENGE,   "报废数量'.
         OFAVP    TYPE MSEG-DMBTR,   "报废平均单位成本
         OFDMB    TYPE MSEG-DMBTR,   "报废金额'.
         "
         OGMNG    TYPE MSEG-MENGE,   "转改制品数量'.
         OGAVP    TYPE MSEG-DMBTR,   "转改制品平均单位成本
         OGDMB    TYPE MSEG-DMBTR,   "转改制品金额'.
         "
         OJMNG    TYPE MSEG-MENGE,   "受托加工出库数量'.
         OJAVP    TYPE MSEG-DMBTR,   "受托加工出库平均单位成本
         OJDMB    TYPE MSEG-DMBTR,   "受托加工出库金额'.
         "
         OLMNG    TYPE MSEG-MENGE,   "加工来料领用数量'.
         OLAVP    TYPE MSEG-DMBTR,   "加工来料领用平均单位成本
         OLDMB    TYPE MSEG-DMBTR,   "加工来料领用金额'.
         "
         OBMNG    TYPE MSEG-MENGE,   "期初出库数量'.
         OBAVP    TYPE MSEG-DMBTR,   "期初出库平均单位成本
         OBDMB    TYPE MSEG-DMBTR,   "期初出库金额'.
         "
         EMENG    TYPE MSEG-MENGE,   "期末数量'.
         EAVPR    TYPE MSEG-DMBTR,   "期末平均单位成本
         EDMBT    TYPE MSEG-DMBTR,   "期末金额'.

       END OF TY_ALV.

"展开用ALV内表
DATA: GT_ALV TYPE STANDARD TABLE OF TY_ALV,
      GW_ALV LIKE LINE OF GT_ALV.

DATA: GT_ALV_TEMP TYPE STANDARD TABLE OF TY_ALV,
      GW_ALV_TEMP LIKE LINE OF GT_ALV_TEMP.
"明细展示用ALV内表
DATA: GT_SUBALV TYPE STANDARD TABLE OF TY_ALV,
      GW_SUBALV LIKE LINE OF GT_SUBALV.
"汇总移动类型用内表类型定义
TYPES: BEGIN OF TY_SUM_DATA,
         MATNR    TYPE MARA-MATNR,
         MAKTX    TYPE MAKT-MAKTX,
         ZGZLX    TYPE CHAR20,     "钢种
         Z_BAT_WJ TYPE ATWRT,   "实际半径
         Z_BAT_BH TYPE ATWRT,   "实际壁厚
         BUKRS    TYPE T001-BUKRS,
         WERKS    TYPE T001W-WERKS,
         KONTS    TYPE T030-KONTS,
         TXT50    TYPE SKAT-TXT50,
         LGORT    TYPE MARD-LGORT,
         CHARG    TYPE MSEG-CHARG,
         BWTAR    TYPE MBEW-BWTAR,
*         MVGRP    TYPE ZZT_MVGP-MVGRP,   HANDWY
         SOBKZ    TYPE MSEG-SOBKZ,

         MENGE    TYPE MSEG-MENGE,
         AVPRC    TYPE MSEG-DMBTR,
         DMBTR    TYPE MSEG-DMBTR,

         SMENG    TYPE MSEG-MENGE,
         SDMBT    TYPE MSEG-DMBTR,
         EMENG    TYPE MSEG-MENGE,
         EDMBT    TYPE MSEG-DMBTR,

       END OF TY_SUM_DATA.
"汇总移动类型用内表
DATA: GT_SUM_DATA TYPE STANDARD TABLE OF TY_SUM_DATA,
      GW_SUM_DATA LIKE LINE OF GT_SUM_DATA.

DATA: GT_MSEG TYPE STANDARD TABLE OF MSEG,
      GW_MSEG LIKE LINE OF GT_MSEG.

DATA: GT_MSEG_311 TYPE STANDARD TABLE OF MSEG,
      GW_MSEG_311 LIKE LINE OF GT_MSEG_311.

DATA: GT_BSEG TYPE STANDARD TABLE OF BSEG,
      GW_BSEG LIKE LINE OF GT_BSEG.

*DATA: GT_ZMVGRP TYPE STANDARD TABLE OF ZZT_KCYDZ,   " HANDWY
*      GW_ZMVGRP LIKE LINE OF GT_ZMVGRP.

"取期初库存用内表*************************************************************START
DATA: GT_MCHB TYPE STANDARD TABLE OF MCHB,
      GW_MCHB LIKE LINE OF GT_MCHB.

DATA: GT_MCHBH TYPE STANDARD TABLE OF MCHBH,
      GW_MCHBH LIKE LINE OF GT_MCHBH.

DATA: GT_MSKA TYPE STANDARD TABLE OF MSKA,
      GW_MSKA LIKE LINE OF GT_MSKA.

DATA: GT_MSKAH TYPE STANDARD TABLE OF MSKAH,
      GW_MSKAH LIKE LINE OF GT_MSKAH.

DATA: GT_MSKAH_SUM TYPE STANDARD TABLE OF MSKAH,
      GW_MSKAH_SUM LIKE LINE OF GT_MSKAH_SUM.

DATA: GT_MSLB TYPE STANDARD TABLE OF MSLB,
      GW_MSLB LIKE LINE OF GT_MSLB.

DATA: GT_MSLBH TYPE STANDARD TABLE OF MSLBH,
      GW_MSLBH LIKE LINE OF GT_MSLBH.

DATA: GT_MSLBH_SUM TYPE STANDARD TABLE OF MSLBH,
      GW_MSLBH_SUM LIKE LINE OF GT_MSLBH_SUM.

DATA: GT_MSKU TYPE STANDARD TABLE OF MSKU,
      GW_MSKU LIKE LINE OF GT_MSKU.

DATA: GT_MSKUH TYPE STANDARD TABLE OF MSKUH,
      GW_MSKUH LIKE LINE OF GT_MSKUH.

DATA: GT_MSKUH_SUM TYPE STANDARD TABLE OF MSKUH,
      GW_MSKUH_SUM LIKE LINE OF GT_MSKUH_SUM.

DATA: GT_MARD TYPE STANDARD TABLE OF MARD,
      GW_MARD LIKE LINE OF GT_MARD.

DATA: GT_MARDH TYPE STANDARD TABLE OF MARDH,
      GW_MARDH LIKE LINE OF GT_MARDH.
"取期初库存用内表***************************************************************END
"取物料组用内表
DATA: GT_MARA TYPE STANDARD TABLE OF MARA,
      GW_MARA LIKE LINE OF GT_MARA.
"物料描述用内表
DATA: GT_MAKT TYPE STANDARD TABLE OF MAKT,
      GW_MAKT LIKE LINE OF GT_MAKT.
"取是否启用批次管理标识用内表
DATA: GT_MARC TYPE STANDARD TABLE OF MARC,
      GW_MARC LIKE LINE OF GT_MARC.

DATA: GT_T156 TYPE STANDARD TABLE OF T156,
      GW_T156 LIKE LINE OF GT_T156.
"取期初金额用内表***********************************************************START
DATA: GT_MBEW TYPE STANDARD TABLE OF MBEW,
      GW_MBEW LIKE LINE OF GT_MBEW.

DATA: GT_MBEWH TYPE STANDARD TABLE OF MBEWH,
      GW_MBEWH LIKE LINE OF GT_MBEWH.

DATA: GT_EBEW TYPE STANDARD TABLE OF EBEW,
      GW_EBEW LIKE LINE OF GT_EBEW.

DATA: GT_EBEWH TYPE STANDARD TABLE OF EBEWH,
      GW_EBEWH LIKE LINE OF GT_EBEWH.

TYPES: BEGIN OF TY_EBEWH_SUM.
        INCLUDE TYPE EBEWH.
TYPES: STDAT TYPE ABPER_RF,
       EDDAT TYPE ABPER_RF,
       END OF TY_EBEWH_SUM.

DATA: GT_EBEWH_SUM TYPE STANDARD TABLE OF TY_EBEWH_SUM,
      GW_EBEWH_SUM LIKE LINE OF GT_EBEWH_SUM.

DATA: GT_MBEW_E TYPE STANDARD TABLE OF MBEW,
      GW_MBEW_E LIKE LINE OF GT_MBEW_E.

DATA: GT_MBEWH_E TYPE STANDARD TABLE OF MBEWH,
      GW_MBEWH_E LIKE LINE OF GT_MBEWH_E.

DATA: GT_EBEW_E TYPE STANDARD TABLE OF EBEW,
      GW_EBEW_E LIKE LINE OF GT_EBEW_E.

DATA: GT_EBEWH_E TYPE STANDARD TABLE OF EBEWH,
      GW_EBEWH_E LIKE LINE OF GT_EBEWH_E.
"取期初金额用内表*************************************************************END
"库存信息汇总用内表
DATA: GT_ZFI035C     TYPE STANDARD TABLE OF ZFI035C,
      GW_ZFI035C     LIKE LINE OF GT_ZFI035C,
      GW_ZFI035C_TMP LIKE LINE OF GT_ZFI035C.

DATA: GT_ZFI035C_SUM TYPE STANDARD TABLE OF ZFI035C,
      GW_ZFI035C_SUM LIKE LINE OF GT_ZFI035C_SUM.
"取总账科目用内表
DATA: GT_T030 TYPE STANDARD TABLE OF T030,
      GW_T030 LIKE LINE OF GT_T030.
"取总账科目描述用内表
DATA: GT_SKAT TYPE STANDARD TABLE OF SKAT,
      GW_SKAT LIKE LINE OF GT_SKAT.
"抛内存给MB5B用变量
DATA: MATNR    TYPE MARA-MATNR,
      BUKRS    TYPE T001-BUKRS,
      WERKS    TYPE T001W-WERKS,
      DATUM    LIKE SY-DATUM,
      BWBST    LIKE AM07M-BWBST,
      PA_SUMFL LIKE AM07M-XSUM,
      PA_DBSTD LIKE AM07M-XSELK.
*"直接取物料移动明细数据用内表
*DATA: GR_BADI_RM07MLBD_DBSYS_OPT TYPE REF TO RM07MLBD_DBSYS_OPT,
*      GV_NEWDB        TYPE ABAP_BOOL.

*"直接取物料移动明细数据用内表
*DATA: ST_MATNR TYPE RANGES_MATNR_TT WITH HEADER LINE,
*      ST_BUKRS TYPE RANGES_BURKS_TT WITH HEADER LINE,
*      ST_WERKS TYPE RANGES_WERKS_TT WITH HEADER LINE,
*      GT_LGORT TYPE RANGES_LGORT_TT WITH HEADER LINE,
*      GT_CHARG TYPE RANGES_CHARG_TT WITH HEADER LINE,
*      GT_BWTAR TYPE RANGES_BWTAR_TT WITH HEADER LINE,
*      GT_BWART TYPE RANGES_BWART_TT WITH HEADER LINE,
*      ST_BUDAT TYPE RANGES_BUDAT_TT WITH HEADER LINE,
*      GT_STOCK_INVENTORY TYPE STOCK_INVENTORY_TT,
*      GV_NO_DBSYS_OPT TYPE ABAP_BOOL.
"ALV展示用变量
DATA: GT_FIELDCAT TYPE STANDARD TABLE OF SLIS_FIELDCAT_ALV,
      GW_FIELDCAT LIKE LINE OF GT_FIELDCAT,
      GW_LAYOUT   TYPE SLIS_LAYOUT_ALV.
"汇总信息展示用变量
DATA: GT_FIELDCAT_K TYPE STANDARD TABLE OF SLIS_FIELDCAT_ALV,
      GW_FIELDCAT_K LIKE LINE OF GT_FIELDCAT_K,
      GW_LAYOUT_K   TYPE SLIS_LAYOUT_ALV.

DATA: OK_CODE  LIKE SY-UCOMM,
      GV_TIMES TYPE N LENGTH 6.
"将从MB5B获取到的数据存到自建表所用内表
DATA: GT_ZFI035K     TYPE STANDARD TABLE OF ZFI035K,
      GW_ZFI035K     LIKE LINE OF GT_ZFI035K,
      GT_ZFI035K_SUM TYPE STANDARD TABLE OF ZFI035K,
      GW_ZFI035K_SUM LIKE LINE OF GT_ZFI035K_SUM,
      GT_ZFI035P     TYPE STANDARD TABLE OF ZFI035P,
      GW_ZFI035P     LIKE LINE OF GT_ZFI035P.

DATA: S_DATUM  TYPE RANGE OF SY-DATUM WITH HEADER LINE,
      SS_LGORT TYPE RANGE OF MSKA-LGORT WITH HEADER LINE.

DATA: L_STRING TYPE STRING.

DATA: L_UZEIT_K_S   LIKE SY-UZEIT,
      L_UZEIT_K_E   LIKE SY-UZEIT,
      L_UZEIT_P_S   LIKE SY-UZEIT,
      L_UZEIT_P_E   LIKE SY-UZEIT,
      L_UZEIT_SUM_S LIKE SY-UZEIT,
      L_UZEIT_SUM_E LIKE SY-UZEIT.

*DATA: LT_ZFI035T TYPE STANDARD TABLE OF ZFI035T,  "HANDWY
*      LW_ZFI035T LIKE LINE OF LT_ZFI035T.

DATA: S_BUKRS TYPE RANGE OF T001-BUKRS WITH HEADER LINE.

"汇总无物料凭证，只有会计凭证的明细数据中的金额所用内表类型定义
TYPES: BEGIN OF TY_SUM_BELNR,
         MATNR TYPE MARA-MATNR,
         WERKS TYPE T001W-WERKS,
         MENGE TYPE MSEG-MENGE,
         DMBTR TYPE MSEG-DMBTR,
         SHKZG TYPE BSEG-SHKZG,
       END OF TY_SUM_BELNR.

"汇总无物料凭证，只有会计凭证的明细数据中的金额所用内表
DATA: GT_SUM_BELNR TYPE STANDARD TABLE OF TY_SUM_BELNR,
      GW_SUM_BELNR LIKE LINE OF GT_SUM_BELNR.

"汇总有物料凭证的明细数据中的金额所用内表类型定义
TYPES: BEGIN OF TY_SUM_MBLNR,
         MATNR TYPE MARA-MATNR,
         WERKS TYPE T001W-WERKS,
         SMENG TYPE MSEG-MENGE,
         EMENG TYPE MSEG-MENGE,
       END OF TY_SUM_MBLNR.

"汇总有物料凭证的明细数据中的金额所用内表定义
DATA: GT_SUM_MBLNR TYPE STANDARD TABLE OF TY_SUM_MBLNR,
      GW_SUM_MBLNR LIKE LINE OF GT_SUM_MBLNR.

"多线程用变量
DATA : GV_SYSTEM       TYPE RZLLI_APCL,
       GV_TASKNAME(10),
       GV_INDEX(3),
       GV_SEND_JOBS    TYPE          I,
       GV_RECEIVE_JOBS TYPE          I,
       GV_RUN_JOBS     TYPE          I,
       GV_EXC_FLAG     TYPE          I,
       GV_MSG(80),
       GV_THREAD_NUM   TYPE          I,
       GV_SUCCESS(1),
       GV_PROCESSED(1),
*       GT_ZTMARA       TYPE STANDARD TABLE OF ZTMARA, HANDWY
*       GW_ZTMARA       LIKE LINE OF GT_ZTMARA, HANDWY
       G_APPLSERVER    TYPE RZLLITAB-APPLSERVER, "RFC Serve Group
       GV_LINES        TYPE I.

"宏定义，设置fieldcat
DEFINE SET_FIELDCAT.
  CLEAR &1.
  &1-FIELDNAME = &3.
  IF &1-FIELDNAME = 'MATNR'
  OR &1-FIELDNAME = 'MAKTX'
  OR &1-FIELDNAME = 'BUKRS'
  OR &1-FIELDNAME = 'WERKS'
  OR &1-FIELDNAME = 'MVGRP'
  OR &1-FIELDNAME = 'LGORT'
  OR &1-FIELDNAME = 'CHARG'.
    &1-KEY = 'X'.
    &1-NO_ZERO = 'X'.
  ENDIF.
  &1-FIX_COLUMN = 'X'.
  &1-SELTEXT_L = &4.
  &1-SELTEXT_M = &1-SELTEXT_L.
  &1-SELTEXT_S = &1-SELTEXT_L.
  APPEND &1 TO &2.
END-OF-DEFINITION.

"宏定义，设置期初期末金额
DEFINE SET_DMBTR.
  CLEAR L_FLAG.

  READ TABLE gt_mbew INTO gw_mbew with key
  matnr = gw_zfi035c-matnr
  BWKEY = GW_ZFI035C-WERKS
  BWTAR = GW_ZFI035C-CHARG BINARY SEARCH.
  IF sy-subrc = 0.
    lc_tabix_e = sy-tabix.
  ENDIF.

  LOOP AT GT_MBEW INTO GW_MBEW FROM lc_tabix_e.
    if gw_mbew-MATNR = GW_ZFI035C-MATNR
       AND gw_mbew-BWKEY = GW_ZFI035C-WERKS
       AND gw_mbew-BWTAR = GW_ZFI035C-CHARG.
      L_TABIX = SY-TABIX.
      CONCATENATE GW_MBEW-LFGJA GW_MBEW-LFMON INTO L_CURRENT_ABPER_J.
      IF L_CURRENT_ABPER_J <= &1 AND GW_MBEW-LBKUM IS NOT INITIAL.
        GW_ZFI035C-DMBTR = GW_MBEW-SALK3 / GW_MBEW-LBKUM * GW_ZFI035C-MENGE.
        L_FLAG = 'X'.

        CLEAR GW_EBEWH_SUM.
        GW_EBEWH_SUM-STDAT = L_STDAT.
        GW_EBEWH_SUM-MATNR = GW_MBEW-MATNR.
        GW_EBEWH_SUM-BWKEY = GW_MBEW-BWKEY.
        GW_EBEWH_SUM-BWTAR = GW_MBEW-BWTAR.
        GW_EBEWH_SUM-LBKUM = GW_MBEW-LBKUM.
        GW_EBEWH_SUM-SALK3 = GW_MBEW-SALK3.
        APPEND GW_EBEWH_SUM TO GT_EBEWH_SUM.

      ENDIF.

      DELETE GT_MBEW INDEX L_TABIX.
    else.
      exit.
    endif.
  ENDLOOP.
  IF L_FLAG IS INITIAL.
    L_TEMPABPER = '999912'.

    READ TABLE gt_mbewh INTO gw_mbewh with key
    matnr = gw_zfi035c-matnr
    BWKEY = GW_ZFI035C-WERKS
    BWTAR = GW_ZFI035C-CHARG BINARY SEARCH.
    IF sy-subrc = 0.
      lc_tabix_e = sy-tabix.
    ENDIF.
    LOOP AT GT_MBEWH INTO GW_MBEWH FROM lc_tabix_e.
      if gw_mbewh-MATNR = GW_ZFI035C-MATNR
         AND gw_mbewh-BWKEY = GW_ZFI035C-WERKS
         AND gw_mbewh-BWTAR = GW_ZFI035C-CHARG.
        L_TABIX = SY-TABIX.
        CONCATENATE GW_MBEWH-LFGJA GW_MBEWH-LFMON INTO L_CURRENT_ABPER_J.
        IF L_CURRENT_ABPER_J >= &1 AND L_CURRENT_ABPER_J <= L_TEMPABPER AND GW_MBEWH-LBKUM IS NOT INITIAL.
          GW_ZFI035C-DMBTR = GW_MBEWH-SALK3 / GW_MBEWH-LBKUM * GW_ZFI035C-MENGE.
          L_TEMPABPER = L_CURRENT_ABPER_J.
          L_FLAG = 'X'.
        ENDIF.
        AT END OF BWTAR.

          CLEAR GW_EBEWH_SUM.
          GW_EBEWH_SUM-STDAT = L_STDAT.
          GW_EBEWH_SUM-MATNR = GW_MBEWH-MATNR.
          GW_EBEWH_SUM-BWKEY = GW_MBEWH-BWKEY.
          GW_EBEWH_SUM-BWTAR = GW_MBEWH-BWTAR.
          GW_EBEWH_SUM-LBKUM = GW_MBEWH-LBKUM.
          GW_EBEWH_SUM-SALK3 = GW_MBEWH-SALK3.
          APPEND GW_EBEWH_SUM TO GT_EBEWH_SUM.

          CLEAR L_TEMPABPER.
          L_TEMPABPER = '999912'.
          EXIT.
        ENDAT.
        DELETE GT_MBEWH INDEX L_TABIX.
      else.
        exit.
      endif.
    ENDLOOP.


    READ TABLE gt_ebew INTO gw_ebew with key
    matnr = gw_zfi035c-matnr
    BWKEY = GW_ZFI035C-WERKS
    BWTAR = GW_ZFI035C-CHARG BINARY SEARCH.
    IF sy-subrc = 0.
      lc_tabix_e = sy-tabix.
    ENDIF.
    LOOP AT GT_EBEW INTO GW_EBEW FROM lc_tabix_e.
      if gw_ebew-MATNR = GW_ZFI035C-MATNR
         AND gw_ebew-BWKEY = GW_ZFI035C-WERKS
         AND gw_ebew-BWTAR = GW_ZFI035C-CHARG.
        L_TABIX = SY-TABIX.
        CONCATENATE GW_EBEW-LFGJA GW_EBEW-LFMON INTO L_CURRENT_ABPER_J.
        IF L_CURRENT_ABPER_J <= &1 AND GW_EBEW-LBKUM IS NOT INITIAL.
          GW_ZFI035C-DMBTR = GW_EBEW-SALK3 / GW_EBEW-LBKUM * GW_ZFI035C-MENGE.
          L_FLAG = 'X'.

          CLEAR GW_EBEWH_SUM.
          GW_EBEWH_SUM-EDDAT = P_EDDAT.
          GW_EBEWH_SUM-MATNR = GW_EBEW-MATNR.
          GW_EBEWH_SUM-BWKEY = GW_EBEW-BWKEY.
          GW_EBEWH_SUM-BWTAR = GW_EBEW-BWTAR.
          GW_EBEWH_SUM-LBKUM = GW_EBEW-LBKUM.
          GW_EBEWH_SUM-SALK3 = GW_EBEW-SALK3.
          APPEND GW_EBEWH_SUM TO GT_EBEWH_SUM.

        ENDIF.
        DELETE GT_EBEW INDEX L_TABIX.
      else.
        exit.
      endif.
    ENDLOOP.
    IF L_FLAG IS INITIAL.
      L_TEMPABPER = '999912'.

      READ TABLE gt_ebewh INTO gw_ebewh with key
      matnr = gw_zfi035c-matnr
      BWKEY = GW_ZFI035C-WERKS
      BWTAR = GW_ZFI035C-CHARG BINARY SEARCH.
      IF sy-subrc = 0.
        lc_tabix_e = sy-tabix.
      ENDIF.

      LOOP AT GT_EBEWH INTO GW_EBEWH FROM lc_tabix.
        if gw_ebewh-MATNR = GW_ZFI035C-MATNR
           AND gw_ebewh-bWKEY = GW_ZFI035C-WERKS
           AND gw_ebewh-bWTAR = GW_ZFI035C-CHARG.
          L_TABIX = SY-TABIX.
          CONCATENATE GW_EBEWH-LFGJA GW_EBEWH-LFMON INTO L_CURRENT_ABPER_J.
          IF L_CURRENT_ABPER_J >= &1 AND L_CURRENT_ABPER_J <= L_TEMPABPER AND GW_EBEWH-LBKUM IS NOT INITIAL.
            GW_ZFI035C-DMBTR = GW_EBEWH-SALK3 / GW_EBEWH-LBKUM * GW_ZFI035C-MENGE.
            L_TEMPABPER = L_CURRENT_ABPER_J.
            L_FLAG = 'X'.
          ENDIF.
          AT END OF BWTAR.

            CLEAR GW_EBEWH_SUM.
            GW_EBEWH_SUM-EDDAT = P_EDDAT.
            GW_EBEWH_SUM-MATNR = GW_EBEWH-MATNR.
            GW_EBEWH_SUM-BWKEY = GW_EBEWH-BWKEY.
            GW_EBEWH_SUM-BWTAR = GW_EBEWH-BWTAR.
            GW_EBEWH_SUM-LBKUM = GW_EBEWH-LBKUM.
            GW_EBEWH_SUM-SALK3 = GW_EBEWH-SALK3.
            APPEND GW_EBEWH_SUM TO GT_EBEWH_SUM.

            CLEAR L_TEMPABPER.
            L_TEMPABPER = '999912'.
            EXIT.
          ENDAT.
          DELETE GT_EBEWH INDEX L_TABIX.
        else.
          exit.
        endif.
      ENDLOOP.
    ENDIF.
  ENDIF.
END-OF-DEFINITION.

SELECTION-SCREEN BEGIN OF BLOCK BL1 WITH FRAME TITLE TEXT-001.
PARAMETERS:     P_BUKRS TYPE T001-BUKRS OBLIGATORY. "公司代码
SELECT-OPTIONS: S_WERKS FOR T001W-WERKS OBLIGATORY. "工厂
SELECT-OPTIONS: S_LGORT FOR MARD-LGORT,             "库位
                S_MATNR FOR MARA-MATNR,             "物料
                S_MATKL FOR MARA-MATKL.             "物料组
PARAMETERS:     P_STDAT TYPE ABPER_RF OBLIGATORY,   "开始期间
                P_EDDAT TYPE ABPER_RF OBLIGATORY.   "结束期间
SELECTION-SCREEN END OF BLOCK BL1.

SELECTION-SCREEN BEGIN OF BLOCK BL2 WITH FRAME TITLE TEXT-002."汇总条件
PARAMETERS: P_GZ AS CHECKBOX,   "钢种
            P_WJ AS CHECKBOX,   "外径
            P_BH AS CHECKBOX,   "壁厚
            P_PC AS CHECKBOX.   "批次
SELECTION-SCREEN END OF BLOCK BL2.

SELECTION-SCREEN BEGIN OF BLOCK BL3 WITH FRAME TITLE TEXT-003.
PARAMETERS: P_DYDD AS CHECKBOX, "是否对应订单
            P_LLJG AS CHECKBOX. "是否来料加工
SELECTION-SCREEN END OF BLOCK BL3.

*SELECTION-SCREEN PUSHBUTTON 1(10) PB_QS USER-COMMAND QS.

INITIALIZATION.
*  MOVE TEXT-004 TO PB_QS."取数按钮
  CLEAR SS_LGORT.
  SS_LGORT-SIGN = 'I'.
  SS_LGORT-OPTION = 'BT'.
  SS_LGORT-LOW = '2700'.
  SS_LGORT-HIGH = '3300'.
  APPEND SS_LGORT.
  SS_LGORT-SIGN = 'I'.
  SS_LGORT-OPTION = 'EQ'.
  SS_LGORT-LOW = '1000'.
  APPEND SS_LGORT.
  SS_LGORT-SIGN = 'I'.
  SS_LGORT-OPTION = 'EQ'.
  SS_LGORT-LOW = '1200'.
  APPEND SS_LGORT.
  SS_LGORT-SIGN = 'I'.
  SS_LGORT-OPTION = 'EQ'.
  SS_LGORT-LOW = '2000'.
  APPEND SS_LGORT.
  SS_LGORT-SIGN = 'I'.
  SS_LGORT-OPTION = 'EQ'.
  SS_LGORT-LOW = '2300'.
  APPEND SS_LGORT.

AT SELECTION-SCREEN.
**************************用于后台取数时暂时注释掉***********************START
  CASE SY-UCOMM.                                            "n599218
    WHEN 'QS'.                                              "n599218
*      PERFORM FRM_GET_TIMES.
*      PERFORM FRM_EXPORT_DATA.  "抛内存给MB5B
*      PERFORM FRM_IMPORT_DATA.  "从MB5B获取结果
  ENDCASE.                                                  "n599218
**************************用于后台取数时暂时注释掉*************************END

START-OF-SELECTION.
  PERFORM FRM_EXPORT_DATA.  "抛内存给MB5B
  PERFORM FRM_IMPORT_DATA.  "从MB5B获取结果

*    PERFORM FRM_GET_DATA.

*  PERFORM FRM_EXPORT_DATA.
*  PERFORM FRM_IMPORT_DATA.
**************************用于后台取数时暂时注释掉***********************START
*  PERFORM FRM_GET_DATA.
**************************用于后台取数时暂时注释掉*************************END
*  PERFORM FRM_GET_DATA_FROM_SELFTABLE.

END-OF-SELECTION.
**************************用于后台取数时暂时注释掉***********************START
*  IF SY-TCODE = 'ZFI036'.
*    处理汇总数据
*    PERFORM FRM_DEAL_DATA_K.
*    PERFORM FRM_SET_FIELDCAT_K.
*    PERFORM FRM_ALV_DISPLAY_K.
*  ENDIF.
  "处理汇总数据
*  PERFORM FRM_DEAL_DATA_K.
*  PERFORM FRM_SET_FIELDCAT_K.
*
*  LW_ZFI035T-UZEIT_A_E = SY-UZEIT.
*  MODIFY ZFI035T FROM LW_ZFI035T.
*  IF SY-SUBRC = 0.
*    COMMIT WORK AND WAIT.
*  ELSE.
*    ROLLBACK WORK.
*  ENDIF.
*
*  PERFORM FRM_ALV_DISPLAY_K.


**************************用于后台取数时暂时注释掉************************END

*&---------------------------------------------------------------------*
*&      Form  FRM_IMPORT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_IMPORT_DATA .
  DATA: L_FLAG TYPE FLAG.
  DATA: L_TEMPABPER TYPE ABPER_RF.

  DATA: L_TIMES  TYPE N LENGTH 6 VALUE 0,
        L_STRING TYPE C LENGTH 20.
  "获取批次特性用变量******************************************************START
  DATA: LF_OBJEK TYPE  OBJNUM,
        LF_OBTAB TYPE  TABELLE,
        "就是T-CODE——MM03下面的批次分类下的对象下的类别种类
        LF_KLART TYPE  KLASSENART,
        "就是T-CODE——MM03下面的批次分类下的分配表里的类别
        LF_CLASS TYPE  KLASSE_D.
  DATA: LT_CHAR   TYPE STANDARD TABLE OF BAPI1003_ALLOC_VALUES_CHAR
          WITH HEADER LINE,
        LT_NUM    TYPE STANDARD TABLE OF BAPI1003_ALLOC_VALUES_NUM
           WITH HEADER LINE,
        LT_CURR   TYPE STANDARD TABLE OF BAPI1003_ALLOC_VALUES_CURR
          WITH HEADER LINE,
        LT_RETURN TYPE STANDARD TABLE OF BAPIRET2
        WITH HEADER LINE.
  "*************************************************************************END

  DATA: L_CURRENT_ABPER   TYPE ABPER_RF,
        L_CURRENT_ABPER_J TYPE ABPER_RF,
        L_MAX_ABPER_S     TYPE ABPER_RF,
        L_MAX_ABPER_E     TYPE ABPER_RF,
        L_MIN_ABPER_S     TYPE ABPER_RF,
        L_MIN_ABPER_E     TYPE ABPER_RF.

  DATA: L_TEMP  LIKE SY-DATUM,
        L_STDAT TYPE ABPER_RF.

  DATA: L_TABIX    LIKE SY-TABIX,
        LC_TABIX   LIKE SY-TABIX,
        LC_TABIX_E LIKE SY-TABIX."HANDWY
*        L_ZKGSB    TYPE ZZT_KCYDZ-ZKGSB.

*  LW_ZFI035T-UZEIT_H_S = SY-UZEIT.
  "从MB5B获取数据
****************CHANGE BY HAND HM AT 20150717*****************START
  IF S_MATNR IS NOT INITIAL.
    IMPORT A = G_T_TOTALS_FLAT FROM MEMORY ID 'ZMMR035_A'.
    IMPORT B = G_T_BELEGE1 FROM MEMORY ID 'ZMMR035_B'.
    FREE MEMORY ID 'ZMMR035_A'.
    FREE MEMORY ID 'ZMMR035_B'.
  ELSE.
    IMPORT A = G_T_TOTALS_FLAT FROM MEMORY ID 'ZMMR035_A'.
    FREE MEMORY ID 'ZMMR035_A'.
    IMPORT C = GV_TIMES FROM MEMORY ID 'ZMMR035_TIMES'.
    FREE MEMORY ID 'ZMMR035_TIMES'.
    DO GV_TIMES TIMES.
      L_TIMES = L_TIMES + 1.
      CONCATENATE 'ZMMR035_TIMES_' L_TIMES INTO L_STRING.
      IMPORT G_T_BELEGE FROM MEMORY ID L_STRING.
      FREE MEMORY ID L_STRING.
      LOOP AT G_T_BELEGE INTO G_S_BELEGE.
        APPEND G_S_BELEGE TO G_T_BELEGE1.
      ENDLOOP.
    ENDDO.
  ENDIF.
***************************************************************END
  IF NOT G_T_TOTALS_FLAT IS INITIAL.
    SELECT *
      FROM MBEWH
      INTO CORRESPONDING FIELDS OF TABLE GT_MBEWH
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MBEWH~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MBEWH~BWKEY = G_T_TOTALS_FLAT-BWKEY
        AND ( MBEWH~LFGJA > P_STDAT+0(4)
         OR ( MBEWH~LFGJA = P_STDAT+0(4) AND MBEWH~LFMON >= P_STDAT+4(2) ) ).

    SELECT *
      FROM EBEW
      INTO CORRESPONDING FIELDS OF TABLE GT_EBEW
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE EBEW~MATNR = G_T_TOTALS_FLAT-MATNR
        AND EBEW~BWKEY = G_T_TOTALS_FLAT-BWKEY.

    SELECT *
    FROM EBEWH
    INTO CORRESPONDING FIELDS OF TABLE GT_EBEWH
    FOR ALL ENTRIES IN G_T_TOTALS_FLAT
    WHERE EBEWH~MATNR = G_T_TOTALS_FLAT-MATNR
      AND EBEWH~BWKEY = G_T_TOTALS_FLAT-BWKEY
        AND ( EBEWH~LFGJA > P_STDAT+0(4)
         OR ( EBEWH~LFGJA = P_STDAT+0(4) AND EBEWH~LFMON >= P_STDAT+4(2) ) ).
    "取科目和评估类用数据
    SELECT *
      FROM MBEW
      INTO CORRESPONDING FIELDS OF TABLE GT_MBEW
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MBEW~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MBEW~BWKEY = G_T_TOTALS_FLAT-BWKEY.

    IF GT_MBEW IS NOT INITIAL.
      SELECT *
        FROM T030
        INTO CORRESPONDING FIELDS OF TABLE GT_T030
        FOR ALL ENTRIES IN GT_MBEW
        WHERE KTOPL = '1000'
          AND KTOSL = 'BSX'
          AND BKLAS = GT_MBEW-BKLAS.
      IF GT_T030 IS NOT INITIAL.
        SELECT *
          FROM SKAT
          INTO CORRESPONDING FIELDS OF TABLE GT_SKAT
          FOR ALL ENTRIES IN GT_T030
          WHERE SPRAS = SY-LANGU
            AND KTOPL = '1000'
            AND SAKNR = GT_T030-KONTS.
      ENDIF.
    ENDIF.
    IF G_T_BELEGE1 IS NOT INITIAL.
      SELECT *
        FROM MSEG
        INTO CORRESPONDING FIELDS OF TABLE GT_MSEG
        FOR ALL ENTRIES IN G_T_BELEGE1
        WHERE MBLNR = G_T_BELEGE1-MBLNR
          AND MJAHR = G_T_BELEGE1-MJAHR
          AND ZEILE = G_T_BELEGE1-ZEILE.

      SELECT *
        FROM MSEG
        INTO CORRESPONDING FIELDS OF TABLE GT_MSEG_311
        WHERE BUKRS = P_BUKRS
          AND MATNR IN S_MATNR
          AND WERKS IN S_WERKS
          AND LGORT IN S_LGORT
          AND MJAHR >= P_STDAT+0(4)
          AND BWART IN ('311','312','541','542','413','414')
          AND DMBTR = 0.

      SELECT *
        FROM BSEG
        INTO CORRESPONDING FIELDS OF TABLE GT_BSEG
        FOR ALL ENTRIES IN G_T_BELEGE1
        WHERE BUKRS = G_T_BELEGE1-BUKRS
          AND GJAHR = G_T_BELEGE1-GJAHR
          AND BELNR = G_T_BELEGE1-BELNR
          AND BUZEI = G_T_BELEGE1-BUZEI.

*      SELECT *                                             "HANDWY
*        FROM ZTMVGRP
*        INTO CORRESPONDING FIELDS OF TABLE GT_ZMVGRP
*        FOR ALL ENTRIES IN G_T_BELEGE1
*        WHERE BWART = G_T_BELEGE1-BWART.
    ENDIF.

    SELECT
      MATNR
      MATKL
      FROM MARA
      INTO CORRESPONDING FIELDS OF TABLE GT_MARA
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MARA~MATNR = G_T_TOTALS_FLAT-MATNR.

    SELECT *
      FROM MAKT
      INTO CORRESPONDING FIELDS OF TABLE GT_MAKT
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MAKT~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MAKT~SPRAS = SY-LANGU.

    SELECT
      MATNR
      WERKS
      XCHAR
      FROM MARC
      INTO CORRESPONDING FIELDS OF TABLE GT_MARC
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MATNR = G_T_TOTALS_FLAT-MATNR
        AND WERKS = G_T_TOTALS_FLAT-BWKEY.
    "取库存数据*********************************************start
    SELECT *
      FROM MCHB
      INTO CORRESPONDING FIELDS OF TABLE GT_MCHB
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MCHB~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MCHB~WERKS = G_T_TOTALS_FLAT-BWKEY.

    SELECT *
      FROM MCHBH
      INTO CORRESPONDING FIELDS OF TABLE GT_MCHBH
      FOR ALL ENTRIES IN  G_T_TOTALS_FLAT
      WHERE MCHBH~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MCHBH~WERKS = G_T_TOTALS_FLAT-BWKEY
        AND ( MCHBH~LFGJA > P_STDAT+0(4)
         OR ( MCHBH~LFGJA = P_STDAT+0(4) AND MCHBH~LFMON >= P_STDAT+4(2) ) ).

    SELECT *
      FROM MSKA
      INTO CORRESPONDING FIELDS OF TABLE GT_MSKA
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MSKA~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MSKA~WERKS = G_T_TOTALS_FLAT-BWKEY.

    SELECT *
      FROM MSKAH
      INTO CORRESPONDING FIELDS OF TABLE GT_MSKAH
      FOR ALL ENTRIES IN  G_T_TOTALS_FLAT
      WHERE MSKAH~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MSKAH~WERKS = G_T_TOTALS_FLAT-BWKEY
        AND ( MSKAH~LFGJA > P_STDAT+0(4)
         OR ( MSKAH~LFGJA = P_STDAT+0(4) AND MSKAH~LFMON >= P_STDAT+4(2) ) ).

    SELECT *
      FROM MSLB
      INTO CORRESPONDING FIELDS OF TABLE GT_MSLB
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MSLB~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MSLB~WERKS = G_T_TOTALS_FLAT-BWKEY.

    SELECT *
      FROM MSLBH
      INTO CORRESPONDING FIELDS OF TABLE GT_MSLBH
      FOR ALL ENTRIES IN  G_T_TOTALS_FLAT
      WHERE MSLBH~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MSLBH~WERKS = G_T_TOTALS_FLAT-BWKEY
        AND ( MSLBH~LFGJA > P_STDAT+0(4)
         OR ( MSLBH~LFGJA = P_STDAT+0(4) AND MSLBH~LFMON >= P_STDAT+4(2) ) ).

    SELECT *
      FROM MSKU
      INTO CORRESPONDING FIELDS OF TABLE GT_MSKU
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MSKU~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MSKU~WERKS = G_T_TOTALS_FLAT-BWKEY.

    SELECT *
      FROM MSKUH
      INTO CORRESPONDING FIELDS OF TABLE GT_MSKUH
      FOR ALL ENTRIES IN  G_T_TOTALS_FLAT
      WHERE MSKUH~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MSKUH~WERKS = G_T_TOTALS_FLAT-BWKEY
        AND ( MSKUH~LFGJA > P_STDAT+0(4)
         OR ( MSKUH~LFGJA = P_STDAT+0(4) AND MSKUH~LFMON >= P_STDAT+4(2) ) ).
*        AND MSKUH~SOBKZ = G_T_BELEGE1-SOBKZ
*        AND MSKUH~CHARG = G_T_BELEGE1-CHARG.

    SELECT *
      FROM MARD
      INTO CORRESPONDING FIELDS OF TABLE GT_MARD
      FOR ALL ENTRIES IN G_T_TOTALS_FLAT
      WHERE MARD~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MARD~WERKS = G_T_TOTALS_FLAT-BWKEY.
*        AND MARD~LGORT = G_T_BELEGE1-LGORT.

    SELECT *
      FROM MARDH
      INTO CORRESPONDING FIELDS OF TABLE GT_MARDH
      FOR ALL ENTRIES IN  G_T_TOTALS_FLAT
      WHERE MARDH~MATNR = G_T_TOTALS_FLAT-MATNR
        AND MARDH~WERKS = G_T_TOTALS_FLAT-BWKEY
        AND ( MARDH~LFGJA > P_STDAT+0(4)
         OR ( MARDH~LFGJA = P_STDAT+0(4) AND MARDH~LFMON >= P_STDAT+4(2) ) ).
*        AND MARDH~LGORT = G_T_BELEGE1-LGORT.
    "取库存数据*********************************************start

  ENDIF.

  CONCATENATE P_STDAT '01' INTO L_TEMP.
  L_TEMP = L_TEMP - 1.
  L_STDAT = P_STDAT.
  P_STDAT = L_TEMP+0(6).
  "CHANGED BY HAND HM AT 2015/04/16 14:53********************************START
*  LOOP AT GT_MCHBH INTO GW_MCHBH.
*    CONCATENATE GW_MCHBH-LFGJA GW_MCHBH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_MCHBH FROM GW_MCHBH.
*      CONTINUE.
*    ENDIF.
*  ENDLOOP.
  SORT GT_MCHBH BY MATNR WERKS LGORT CHARG LFGJA LFMON.
*  DELETE ADJACENT DUPLICATES FROM GT_MCHBH COMPARING MATNR WERKS LGORT CHARG.
  "************************************************************************END

  "消除不必要的维度的影响，在MSLB和MSLBH中表现为供应商维度
  CLEAR GT_MSLBH_SUM.
  LOOP AT GT_MSLBH INTO GW_MSLBH.
*    CONCATENATE GW_MSLBH-LFGJA GW_MSLBH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_MSLBH FROM GW_MSLBH.
*      CONTINUE.
*    ENDIF.
    CLEAR GW_MSLBH_SUM.
    GW_MSLBH_SUM-MATNR = GW_MSLBH-MATNR.
    GW_MSLBH_SUM-WERKS = GW_MSLBH-WERKS.
    GW_MSLBH_SUM-CHARG = GW_MSLBH-CHARG.
    GW_MSLBH_SUM-LFGJA = GW_MSLBH-LFGJA.
    GW_MSLBH_SUM-LFMON = GW_MSLBH-LFMON.
    GW_MSLBH_SUM-LBLAB = GW_MSLBH-LBLAB.
    GW_MSLBH_SUM-LBINS = GW_MSLBH-LBINS.
    COLLECT GW_MSLBH_SUM INTO GT_MSLBH_SUM.
  ENDLOOP.
  CLEAR GT_MSLBH.
  MOVE-CORRESPONDING GT_MSLBH_SUM TO GT_MSLBH.
  SORT GT_MSLBH BY MATNR WERKS LIFNR CHARG LFGJA LFMON.
  "CHANGED BY HAND HM AT 2015/04/16 14:53********************************START
*  DELETE ADJACENT DUPLICATES FROM GT_MSLBH COMPARING MATNR WERKS LIFNR CHARG.
  "************************************************************************END

  CLEAR GT_MSLBH_SUM.
  LOOP AT GT_MSLB INTO GW_MSLB.
    CLEAR GW_MSLBH_SUM.
    GW_MSLBH_SUM-MATNR = GW_MSLB-MATNR.
    GW_MSLBH_SUM-WERKS = GW_MSLB-WERKS.
    GW_MSLBH_SUM-CHARG = GW_MSLB-CHARG.
    GW_MSLBH_SUM-LFGJA = GW_MSLB-LFGJA.
    GW_MSLBH_SUM-LFMON = GW_MSLB-LFMON.
    GW_MSLBH_SUM-LBLAB = GW_MSLB-LBLAB.
    GW_MSLBH_SUM-LBINS = GW_MSLB-LBINS.
    COLLECT GW_MSLBH_SUM INTO GT_MSLBH_SUM.
  ENDLOOP.
  CLEAR GT_MSLB.
  MOVE-CORRESPONDING GT_MSLBH_SUM TO GT_MSLB.

  CLEAR GT_MSKUH_SUM.
  LOOP AT GT_MSKUH INTO GW_MSKUH.
*    CONCATENATE GW_MSKUH-LFGJA GW_MSKUH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_MSKUH FROM GW_MSKUH.
*      CONTINUE.
*    ENDIF.
    CLEAR GW_MSKUH_SUM.
    GW_MSKUH_SUM-MATNR = GW_MSKUH-MATNR.
    GW_MSKUH_SUM-WERKS = GW_MSKUH-WERKS.
    GW_MSKUH_SUM-CHARG = GW_MSKUH-CHARG.
    GW_MSKUH_SUM-LFGJA = GW_MSKUH-LFGJA.
    GW_MSKUH_SUM-LFMON = GW_MSKUH-LFMON.
    GW_MSKUH_SUM-KULAB = GW_MSKUH-KULAB.
    GW_MSKUH_SUM-KUINS = GW_MSKUH-KUINS.
    COLLECT GW_MSKUH_SUM INTO GT_MSKUH_SUM.
  ENDLOOP.
  CLEAR GT_MSKUH.
  MOVE-CORRESPONDING GT_MSKUH_SUM TO GT_MSKUH.
  SORT GT_MSKUH BY MATNR WERKS KUNNR CHARG LFGJA LFMON.
  "CHANGED BY HAND HM AT 2015/04/16 14:53********************************START
*  DELETE ADJACENT DUPLICATES FROM GT_MSKUH COMPARING MATNR WERKS KUNNR CHARG.
  "************************************************************************END

  CLEAR GT_MSKUH_SUM.
  LOOP AT GT_MSKU INTO GW_MSKU.
    CLEAR GW_MSKUH_SUM.
    GW_MSKUH_SUM-MATNR = GW_MSKU-MATNR.
    GW_MSKUH_SUM-WERKS = GW_MSKU-WERKS.
    GW_MSKUH_SUM-CHARG = GW_MSKU-CHARG.
    GW_MSKUH_SUM-LFGJA = GW_MSKU-LFGJA.
    GW_MSKUH_SUM-LFMON = GW_MSKU-LFMON.
    GW_MSKUH_SUM-KULAB = GW_MSKU-KULAB.
    GW_MSKUH_SUM-KUINS = GW_MSKU-KUINS.
    COLLECT GW_MSKUH_SUM INTO GT_MSKUH_SUM.
  ENDLOOP.
  CLEAR GT_MSKU.
  MOVE-CORRESPONDING GT_MSKUH_SUM TO GT_MSKU.

*  LOOP AT GT_MARDH INTO GW_MARDH.
*    CONCATENATE GW_MARDH-LFGJA GW_MARDH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_MARDH FROM GW_MARDH.
*    ENDIF.
*  ENDLOOP.
  SORT GT_MARDH BY MATNR WERKS LGORT LFGJA LFMON.
  "CHANGED BY HAND HM AT 2015/04/16 14:53********************************START
*  DELETE ADJACENT DUPLICATES FROM GT_MARDH COMPARING MATNR WERKS LGORT.
  "************************************************************************END

  "去除销售订单维度
  CLEAR GT_MSKAH_SUM.
  LOOP AT GT_MSKAH INTO GW_MSKAH.
*    CONCATENATE GW_MSKAH-LFGJA GW_MSKAH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_MSKAH FROM GW_MSKAH.
*      CONTINUE.
*    ENDIF.
    CLEAR GW_MSKAH_SUM.
    GW_MSKAH_SUM-MATNR = GW_MSKAH-MATNR.
    GW_MSKAH_SUM-WERKS = GW_MSKAH-WERKS.
    GW_MSKAH_SUM-LGORT = GW_MSKAH-LGORT.
    GW_MSKAH_SUM-CHARG = GW_MSKAH-CHARG.
    GW_MSKAH_SUM-LFGJA = GW_MSKAH-LFGJA.
    GW_MSKAH_SUM-LFMON = GW_MSKAH-LFMON.
    GW_MSKAH_SUM-KALAB = GW_MSKAH-KALAB.
    GW_MSKAH_SUM-KAINS = GW_MSKAH-KAINS.
    GW_MSKAH_SUM-KASPE = GW_MSKAH-KASPE.
    COLLECT GW_MSKAH_SUM INTO GT_MSKAH_SUM.
  ENDLOOP.
  CLEAR GT_MSKAH.
  MOVE-CORRESPONDING GT_MSKAH_SUM TO GT_MSKAH.
  SORT GT_MSKAH BY MATNR WERKS LGORT CHARG LFGJA LFMON.
  "CHANGED BY HAND HM AT 2015/04/16 14:53********************************START
*  DELETE ADJACENT DUPLICATES FROM GT_MSKAH COMPARING MATNR WERKS LGORT CHARG.
  "************************************************************************END

  "去除销售订单维度
  CLEAR GT_MSKAH_SUM.
  LOOP AT GT_MSKA INTO GW_MSKA.
    CLEAR GW_MSKAH_SUM.
    GW_MSKAH_SUM-MATNR = GW_MSKA-MATNR.
    GW_MSKAH_SUM-WERKS = GW_MSKA-WERKS.
    GW_MSKAH_SUM-LGORT = GW_MSKA-LGORT.
    GW_MSKAH_SUM-CHARG = GW_MSKA-CHARG.
    GW_MSKAH_SUM-LFGJA = GW_MSKA-LFGJA.
    GW_MSKAH_SUM-LFMON = GW_MSKA-LFMON.
    GW_MSKAH_SUM-KALAB = GW_MSKA-KALAB.
    GW_MSKAH_SUM-KAINS = GW_MSKA-KAINS.
    GW_MSKAH_SUM-KASPE = GW_MSKA-KASPE.
    COLLECT GW_MSKAH_SUM INTO GT_MSKAH_SUM.
  ENDLOOP.
  CLEAR GT_MSKA.
  MOVE-CORRESPONDING GT_MSKAH_SUM TO GT_MSKA.

  SORT GT_MBEW BY MATNR BWKEY BWTAR LFGJA LFMON.

*  LOOP AT GT_MBEWH INTO GW_MBEWH.
*    CONCATENATE GW_MBEWH-LFGJA GW_MBEWH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_MBEWH FROM GW_MBEWH.
*    ENDIF.
*  ENDLOOP.
  SORT GT_MBEWH BY MATNR BWKEY BWTAR LFGJA LFMON.
*  DELETE ADJACENT DUPLICATES FROM GT_MBEWH COMPARING MATNR BWKEY BWTAR.


  SORT GT_EBEW BY MATNR BWKEY BWTAR LFGJA LFMON.

  CLEAR GT_EBEWH_SUM.
  LOOP AT GT_EBEWH INTO GW_EBEWH.
*    CONCATENATE GW_EBEWH-LFGJA GW_EBEWH-LFMON INTO L_CURRENT_ABPER.
*    IF L_CURRENT_ABPER < P_STDAT.
*      DELETE TABLE GT_EBEWH FROM GW_EBEWH.
*      CONTINUE.
*    ENDIF.
    CLEAR GW_EBEWH_SUM.
    GW_EBEWH_SUM-MATNR = GW_EBEWH-MATNR.
    GW_EBEWH_SUM-BWKEY = GW_EBEWH-BWKEY.
    GW_EBEWH_SUM-BWTAR = GW_EBEWH-BWTAR.
    GW_EBEWH_SUM-LFGJA = GW_EBEWH-LFGJA.
    GW_EBEWH_SUM-LFMON = GW_EBEWH-LFMON.
    GW_EBEWH_SUM-SALK3 = GW_EBEWH-SALK3.
    COLLECT GW_EBEWH_SUM INTO GT_EBEWH_SUM.
  ENDLOOP.
  CLEAR GT_EBEWH.
  MOVE-CORRESPONDING GT_EBEWH_SUM TO GT_EBEWH.
  SORT GT_EBEWH BY MATNR BWKEY BWTAR LFGJA LFMON.
*  DELETE ADJACENT DUPLICATES FROM GT_EBEWH COMPARING MATNR BWKEY BWTAR VBELN POSNR.

  CLEAR GT_EBEWH_SUM.
  SORT GT_MAKT BY MATNR.
  SORT GT_MARA BY MATNR.
  SORT GT_MARC BY MATNR WERKS.
  SORT GT_MBEW BY MATNR BWKEY.
  SORT GT_T030 BY BKLAS.
  SORT GT_SKAT BY SAKNR.
  SORT GT_MSEG BY MBLNR GJAHR ZEILE.
  SORT GT_BSEG BY BUKRS GJAHR BELNR BUZEI.
  SORT G_T_BELEGE1 BY MATNR WERKS LGORT CHARG.
*  SORT GT_ZMVGRP BY BWART KZBEW SOBKZ SHKZG ZKGSB LGORT. "HANDWY

  "库存表排序
  SORT GT_MCHB BY MATNR WERKS.
  SORT GT_MSKA BY MATNR WERKS.
  SORT GT_MARD BY MATNR WERKS.
  SORT GT_MSLB BY MATNR WERKS.
  SORT GT_MSKU BY MATNR WERKS.

  LOOP AT G_T_TOTALS_FLAT INTO G_S_TOTALS_FLAT.
    CLEAR GW_ZFI035K.
    GW_ZFI035K-BUKRS = P_BUKRS.
    GW_ZFI035K-MATNR = G_S_TOTALS_FLAT-MATNR.
    GW_ZFI035K-MAKTX = G_S_TOTALS_FLAT-MAKTX.
    GW_ZFI035K-WERKS = G_S_TOTALS_FLAT-BWKEY.
    GW_ZFI035K-STDAT = G_S_TOTALS_FLAT-START_DATE.
    GW_ZFI035K-EDDAT = G_S_TOTALS_FLAT-END_DATE.
    GW_ZFI035K-SMENG = G_S_TOTALS_FLAT-ANFMENGE.
    GW_ZFI035K-MEINS = G_S_TOTALS_FLAT-MEINS.
    GW_ZFI035K-SDMBT = G_S_TOTALS_FLAT-ANFWERT.
    GW_ZFI035K-WAERS = G_S_TOTALS_FLAT-WAERS.
    GW_ZFI035K-EMENG = G_S_TOTALS_FLAT-ENDMENGE.
    GW_ZFI035K-EDMBT = G_S_TOTALS_FLAT-ENDWERT.
    "物料组
    READ TABLE GT_MARA INTO GW_MARA WITH KEY
    MATNR = GW_ZFI035K-MATNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035K-MATKL = GW_MARA-MATKL.
      DELETE GT_MARA INDEX SY-TABIX.
    ENDIF.
    "评估类&科目&科目描述
    READ TABLE GT_MBEW INTO GW_MBEW WITH KEY
    MATNR = GW_ZFI035K-MATNR
    BWKEY = GW_ZFI035K-WERKS BINARY SEARCH.
    IF SY-SUBRC = 0.
      "评估类
      GW_ZFI035K-BKLAS = GW_MBEW-BKLAS.
      READ TABLE GT_T030 INTO GW_T030 WITH KEY
      BKLAS = GW_MBEW-BKLAS BINARY SEARCH.
      IF SY-SUBRC = 0.
        "科目
        GW_ZFI035K-KONTS = GW_T030-KONTS.
        READ TABLE GT_SKAT INTO GW_SKAT WITH KEY
        SAKNR = GW_ZFI035K-KONTS BINARY SEARCH.
        IF SY-SUBRC = 0.
          "科目描述
          GW_ZFI035K-TXT50 = GW_SKAT-TXT50.
        ENDIF.
      ENDIF.
    ENDIF.
    APPEND GW_ZFI035K TO GT_ZFI035K.
    "取库存数据用于存储到自建表ZFI035C**********************************START
    CLEAR GW_MARC.
    READ TABLE GT_MARC INTO GW_MARC WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR BINARY SEARCH.
    IF GW_MARC-XCHAR = 'X'.   "是否启用了批次管理
      DELETE GT_MARC INDEX SY-TABIX.

      READ TABLE GT_MCHB INTO GW_MCHB WITH KEY
      MATNR = G_S_TOTALS_FLAT-MATNR
      WERKS = G_S_TOTALS_FLAT-BWKEY.
      IF SY-SUBRC = 0.
        LC_TABIX = SY-TABIX.
      ELSE.
        DESCRIBE TABLE GT_MCHB LINES LC_TABIX.
      ENDIF.

      LOOP AT GT_MCHB INTO GW_MCHB FROM LC_TABIX.
        IF GW_MCHB-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MCHB-WERKS = G_S_TOTALS_FLAT-BWKEY.
          L_TABIX = SY-TABIX.
          CONCATENATE GW_MCHB-LFGJA GW_MCHB-LFMON INTO L_CURRENT_ABPER.
          IF L_CURRENT_ABPER <= P_STDAT.
            CLEAR GW_ZFI035C.
            GW_ZFI035C-MATNR = GW_MCHB-MATNR.
            GW_ZFI035C-WERKS = GW_MCHB-WERKS.
            GW_ZFI035C-LGORT = GW_MCHB-LGORT.
            GW_ZFI035C-CHARG = GW_MCHB-CHARG.
            GW_ZFI035C-MENGE = GW_MCHB-CLABS + GW_MCHB-CSPEM + GW_MCHB-CINSM.
            GW_ZFI035C-STDAT = P_STDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.

            SET_DMBTR P_STDAT.
            GW_ZFI035C-STDAT = P_STDAT.

            IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
              GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
            ENDIF.

            APPEND GW_ZFI035C TO GT_ZFI035C.
            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.
          "CHANGED BY HAND HM AT 2015/04/16 15:09********************************START
          IF L_CURRENT_ABPER <= P_EDDAT.
            CLEAR GW_ZFI035C.
            GW_ZFI035C-MATNR = GW_MCHB-MATNR.
            GW_ZFI035C-WERKS = GW_MCHB-WERKS.
            GW_ZFI035C-LGORT = GW_MCHB-LGORT.
            GW_ZFI035C-CHARG = GW_MCHB-CHARG.
            GW_ZFI035C-MENGE = GW_MCHB-CLABS + GW_MCHB-CSPEM + GW_MCHB-CINSM.
            GW_ZFI035C-EDDAT = P_EDDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.

            SET_DMBTR P_EDDAT .
            GW_ZFI035C-EDDAT = P_EDDAT.

            IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
              GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
            ENDIF.

            APPEND GW_ZFI035C TO GT_ZFI035C.

            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.
          "************************************************************************END
          DELETE GT_MCHB INDEX L_TABIX.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.
      "期初库存****************************************************************START
      CLEAR: GW_ZFI035C,GW_ZFI035C_TMP.
      GW_ZFI035C-STDAT = '999912'.
      GW_ZFI035C_TMP-EDDAT = '999912'.

      READ TABLE GT_MCHBH INTO GW_MCHBH WITH KEY
      MATNR = G_S_TOTALS_FLAT-MATNR
      WERKS = G_S_TOTALS_FLAT-BWKEY.
      IF SY-SUBRC = 0.
        LC_TABIX = SY-TABIX.
      ELSE.
        DESCRIBE TABLE GT_MCHBH LINES LC_TABIX.
      ENDIF.

      LOOP AT GT_MCHBH INTO GW_MCHBH FROM LC_TABIX.
        IF GW_MCHBH-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MCHBH-WERKS = G_S_TOTALS_FLAT-BWKEY.
          L_TABIX = SY-TABIX.
          CONCATENATE GW_MCHBH-LFGJA GW_MCHBH-LFMON INTO L_CURRENT_ABPER.
          "期初库存
          IF L_CURRENT_ABPER >= P_STDAT AND L_CURRENT_ABPER <= GW_ZFI035C-STDAT.
            GW_ZFI035C-MATNR = GW_MCHBH-MATNR.
            GW_ZFI035C-WERKS = GW_MCHBH-WERKS.
            GW_ZFI035C-LGORT = GW_MCHBH-LGORT.
            GW_ZFI035C-CHARG = GW_MCHBH-CHARG.
            GW_ZFI035C-MENGE = GW_MCHBH-CLABS + GW_MCHBH-CSPEM + GW_MCHBH-CINSM.
            GW_ZFI035C-STDAT = L_CURRENT_ABPER.
*        GW_ZFI035C-EDDAT = P_EDDAT.

            SET_DMBTR P_STDAT .

            IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
              GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
            ENDIF.

          ENDIF.
          AT END OF CHARG.
            IF GW_ZFI035C-MATNR IS NOT INITIAL.
              GW_ZFI035C-STDAT = P_STDAT.
              CLEAR GW_ZFI035C-EDDAT.
              APPEND GW_ZFI035C TO GT_ZFI035C.
              CLEAR GW_ZFI035C-LGORT.
              COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
            ENDIF.
            CLEAR GW_ZFI035C.
            GW_ZFI035C-STDAT = '999912'.
          ENDAT.
          "期末库存
          IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C_TMP-EDDAT.
            GW_ZFI035C_TMP-MATNR = GW_MCHBH-MATNR.
            GW_ZFI035C_TMP-WERKS = GW_MCHBH-WERKS.
            GW_ZFI035C_TMP-LGORT = GW_MCHBH-LGORT.
            GW_ZFI035C_TMP-CHARG = GW_MCHBH-CHARG.
            GW_ZFI035C_TMP-MENGE = GW_MCHBH-CLABS + GW_MCHBH-CSPEM + GW_MCHBH-CINSM.
            GW_ZFI035C_TMP-EDDAT = L_CURRENT_ABPER.
*        gw_zfi035c_tmp-EDDAT = P_EDDAT.

            SET_DMBTR P_EDDAT.

            IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
              GW_ZFI035C_TMP-DMBTR = GW_ZFI035C_TMP-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
            ENDIF.

          ENDIF.
          AT END OF CHARG.
            IF GW_ZFI035C_TMP-MATNR IS NOT INITIAL.
              GW_ZFI035C_TMP-EDDAT = P_EDDAT.
              APPEND GW_ZFI035C_TMP TO GT_ZFI035C.
              CLEAR GW_ZFI035C_TMP-LGORT.
              COLLECT GW_ZFI035C_TMP INTO GT_ZFI035C_SUM.
            ENDIF.
            CLEAR GW_ZFI035C_TMP.
            GW_ZFI035C_TMP-EDDAT = '999912'.
          ENDAT.
          DELETE GT_MCHBH INDEX L_TABIX.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.
      "**************************************************************************END
      "期末库存****************************************************************START
*      CLEAR GW_ZFI035C.
*      GW_ZFI035C-EDDAT = '999912'.
*      LOOP AT GT_MCHBH INTO GW_MCHBH WHERE MATNR = G_S_TOTALS_FLAT-MATNR
*                                       AND WERKS = G_S_TOTALS_FLAT-BWKEY.
*        CONCATENATE GW_MCHBH-LFGJA GW_MCHBH-LFMON INTO L_CURRENT_ABPER.
*        IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C-EDDAT.
*          GW_ZFI035C-MATNR = GW_MCHBH-MATNR.
*          GW_ZFI035C-WERKS = GW_MCHBH-WERKS.
*          GW_ZFI035C-LGORT = GW_MCHBH-LGORT.
*          GW_ZFI035C-CHARG = GW_MCHBH-CHARG.
*          GW_ZFI035C-MENGE = GW_MCHBH-CLABS + GW_MCHBH-CSPEM + GW_MCHBH-CINSM.
*          GW_ZFI035C-EDDAT = L_CURRENT_ABPER.
**        GW_ZFI035C-EDDAT = P_EDDAT.
*
*          SET_DMBTR P_EDDAT.
*
*          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
*            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
*          ENDIF.
*
*        ENDIF.
*        AT END OF CHARG.
*          IF GW_ZFI035C-MATNR IS NOT INITIAL.
*            GW_ZFI035C-EDDAT = P_EDDAT.
*            APPEND GW_ZFI035C TO GT_ZFI035C.
*            CLEAR GW_ZFI035C-LGORT.
*            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
*          ENDIF.
*          CLEAR GW_ZFI035C.
*          GW_ZFI035C-EDDAT = '999912'.
*        ENDAT.
*      ENDLOOP.
      "**************************************************************************END
    ELSE.
      "当前表

      READ TABLE GT_MARD INTO GW_MARD WITH KEY
      MATNR = G_S_TOTALS_FLAT-MATNR
      WERKS = G_S_TOTALS_FLAT-BWKEY.
      IF SY-SUBRC = 0.
        LC_TABIX = SY-TABIX.
      ELSE.
        DESCRIBE TABLE GT_MARD LINES LC_TABIX.
      ENDIF.

      LOOP AT GT_MARD INTO GW_MARD FROM LC_TABIX.
        IF GW_MARD-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MARD-WERKS = G_S_TOTALS_FLAT-BWKEY.
          L_TABIX = SY-TABIX.
          CONCATENATE GW_MARD-LFGJA GW_MARD-LFMON INTO L_CURRENT_ABPER.
          "期初
          IF L_CURRENT_ABPER <= P_STDAT.
            CLEAR GW_ZFI035C.
            GW_ZFI035C-MATNR = GW_MARD-MATNR.
            GW_ZFI035C-WERKS = GW_MARD-WERKS.
            GW_ZFI035C-LGORT = GW_MARD-LGORT.
*          GW_ZFI035C-CHARG = GW_MARD-CHARG.
            GW_ZFI035C-MENGE = GW_MARD-LABST + GW_MARD-INSME + GW_MARD-SPEME.
            GW_ZFI035C-STDAT = P_STDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.
            IF GW_ZFI035K-SMENG IS NOT INITIAL.
              GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
            ENDIF.
            APPEND GW_ZFI035C TO GT_ZFI035C.
            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.
          "期末
          IF L_CURRENT_ABPER <= P_EDDAT.
            CLEAR GW_ZFI035C.
            GW_ZFI035C-MATNR = GW_MARD-MATNR.
            GW_ZFI035C-WERKS = GW_MARD-WERKS.
            GW_ZFI035C-LGORT = GW_MARD-LGORT.
*          GW_ZFI035C-CHARG = GW_MARD-CHARG.
            GW_ZFI035C-MENGE = GW_MARD-LABST + GW_MARD-INSME + GW_MARD-SPEME.
            GW_ZFI035C-EDDAT = P_EDDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.
            IF GW_ZFI035K-EMENG IS NOT INITIAL.
              GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
            ENDIF.
            APPEND GW_ZFI035C TO GT_ZFI035C.
            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.

          DELETE GT_MARD INDEX L_TABIX.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.
      "历史表
      "期初库存
      CLEAR: GW_ZFI035C,GW_ZFI035C_TMP.
      GW_ZFI035C-STDAT = '999912'.
      GW_ZFI035C_TMP-EDDAT = '999912'.

      READ TABLE GT_MARDH INTO GW_MARDH WITH KEY
      MATNR = G_S_TOTALS_FLAT-MATNR
      WERKS = G_S_TOTALS_FLAT-BWKEY.
      IF SY-SUBRC = 0.
        LC_TABIX = SY-TABIX.
      ELSE.
        DESCRIBE TABLE GT_MARDH LINES LC_TABIX.
      ENDIF.

      LOOP AT GT_MARDH INTO GW_MARDH FROM LC_TABIX.
        IF GW_MARDH-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MARDH-WERKS = G_S_TOTALS_FLAT-BWKEY.
          L_TABIX = SY-TABIX.
          CONCATENATE GW_MARDH-LFGJA GW_MARDH-LFMON INTO L_CURRENT_ABPER.
          "期初
          IF L_CURRENT_ABPER >= P_STDAT AND L_CURRENT_ABPER <= GW_ZFI035C-STDAT.
            GW_ZFI035C-MATNR = GW_MARDH-MATNR.
            GW_ZFI035C-WERKS = GW_MARDH-WERKS.
            GW_ZFI035C-LGORT = GW_MARDH-LGORT.
*        GW_ZFI035C-CHARG = GW_MARDH-CHARG.
            GW_ZFI035C-MENGE = GW_MARDH-LABST + GW_MARDH-INSME + GW_MARDH-SPEME.
            GW_ZFI035C-STDAT = L_CURRENT_ABPER.
*        GW_ZFI035C-EDDAT = P_EDDAT.
            IF GW_ZFI035K-SMENG IS NOT INITIAL.
              GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
            ENDIF.
          ENDIF.
          AT END OF LGORT.
            IF GW_ZFI035C-MATNR IS NOT INITIAL.
              GW_ZFI035C-STDAT = P_STDAT.
              APPEND GW_ZFI035C TO GT_ZFI035C.
              CLEAR GW_ZFI035C-LGORT.
              COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
            ENDIF.
            CLEAR GW_ZFI035C.
            GW_ZFI035C-STDAT = '999912'.
          ENDAT.
          "期末

          IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C_TMP-EDDAT.
            GW_ZFI035C_TMP-MATNR = GW_MARDH-MATNR.
            GW_ZFI035C_TMP-WERKS = GW_MARDH-WERKS.
            GW_ZFI035C_TMP-LGORT = GW_MARDH-LGORT.
*        gw_zfi035c_tmp-CHARG = GW_MARDH-CHARG.
            GW_ZFI035C_TMP-MENGE = GW_MARDH-LABST + GW_MARDH-INSME + GW_MARDH-SPEME.
            GW_ZFI035C_TMP-EDDAT = L_CURRENT_ABPER.
*        gw_zfi035c_tmp-EDDAT = P_EDDAT.
            IF GW_ZFI035K-EMENG IS NOT INITIAL.
              GW_ZFI035C_TMP-DMBTR = GW_ZFI035C_TMP-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
            ENDIF.
          ENDIF.
          AT END OF LGORT.
            IF GW_ZFI035C_TMP-MATNR IS NOT INITIAL.
              GW_ZFI035C_TMP-EDDAT = P_EDDAT.
              APPEND GW_ZFI035C_TMP TO GT_ZFI035C.
              CLEAR GW_ZFI035C_TMP-LGORT.
              COLLECT GW_ZFI035C_TMP INTO GT_ZFI035C_SUM.
            ENDIF.
            CLEAR GW_ZFI035C_TMP.
            GW_ZFI035C_TMP-EDDAT = '999912'.
          ENDAT.

          DELETE GT_MARDH INDEX L_TABIX.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.
      "期末库存
*      CLEAR GW_ZFI035C.
*      GW_ZFI035C-EDDAT = '999912'.
*      LOOP AT GT_MARDH INTO GW_MARDH WHERE MATNR = G_S_TOTALS_FLAT-MATNR
*                                   AND WERKS = G_S_TOTALS_FLAT-BWKEY.
*        CONCATENATE GW_MARDH-LFGJA GW_MARDH-LFMON INTO L_CURRENT_ABPER.
*        "期初
*        IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C-EDDAT.
*          GW_ZFI035C-MATNR = GW_MARDH-MATNR.
*          GW_ZFI035C-WERKS = GW_MARDH-WERKS.
*          GW_ZFI035C-LGORT = GW_MARDH-LGORT.
**        GW_ZFI035C-CHARG = GW_MARDH-CHARG.
*          GW_ZFI035C-MENGE = GW_MARDH-LABST + GW_MARDH-INSME + GW_MARDH-SPEME.
*          GW_ZFI035C-EDDAT = L_CURRENT_ABPER.
**        GW_ZFI035C-EDDAT = P_EDDAT.
*          IF GW_ZFI035K-EMENG IS NOT INITIAL.
*            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
*          ENDIF.
*        ENDIF.
*        AT END OF LGORT.
*          IF GW_ZFI035C-MATNR IS NOT INITIAL.
*            GW_ZFI035C-EDDAT = P_EDDAT.
*            APPEND GW_ZFI035C TO GT_ZFI035C.
*            CLEAR GW_ZFI035C-LGORT.
*            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
*          ENDIF.
*          CLEAR GW_ZFI035C.
*          GW_ZFI035C-EDDAT = '999912'.
*        ENDAT.
*      ENDLOOP.
    ENDIF.


    READ TABLE GT_MSLB INTO GW_MSLB WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR
    WERKS = G_S_TOTALS_FLAT-BWKEY.
    IF SY-SUBRC = 0.
      LC_TABIX = SY-TABIX.
    ELSE.
      DESCRIBE TABLE GT_MSLB LINES LC_TABIX.
    ENDIF.

    LOOP AT GT_MSLB INTO GW_MSLB FROM LC_TABIX.
      IF GW_MSLB-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MSLB-WERKS = G_S_TOTALS_FLAT-BWKEY.
        L_TABIX = SY-TABIX.
        CONCATENATE GW_MSLB-LFGJA GW_MSLB-LFMON INTO L_CURRENT_ABPER.
        "期初
        IF L_CURRENT_ABPER <= P_STDAT.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-MATNR = GW_MSLB-MATNR.
          GW_ZFI035C-WERKS = GW_MSLB-WERKS.
*          GW_ZFI035C-LGORT = GW_MSLB-LGORT.
          GW_ZFI035C-CHARG = GW_MSLB-CHARG.
          GW_ZFI035C-MENGE = GW_MSLB-LBLAB + GW_MSLB-LBINS.
          GW_ZFI035C-STDAT = P_STDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_STDAT.
          GW_ZFI035C-STDAT = P_STDAT.

          IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          ENDIF.

          APPEND GW_ZFI035C TO GT_ZFI035C.
          CLEAR GW_ZFI035C-LGORT.
          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
        ENDIF.
        "期末
        IF L_CURRENT_ABPER <= P_EDDAT.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-MATNR = GW_MSLB-MATNR.
          GW_ZFI035C-WERKS = GW_MSLB-WERKS.
*          GW_ZFI035C-LGORT = GW_MSLB-LGORT.
          GW_ZFI035C-CHARG = GW_MSLB-CHARG.
          GW_ZFI035C-MENGE = GW_MSLB-LBLAB + GW_MSLB-LBINS.
          GW_ZFI035C-EDDAT = P_EDDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_EDDAT .
          GW_ZFI035C-EDDAT = P_EDDAT.

          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          ENDIF.

          APPEND GW_ZFI035C TO GT_ZFI035C.

          CLEAR GW_ZFI035C-LGORT.
          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
        ENDIF.

        DELETE GT_MSLB INDEX L_TABIX.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.

    CLEAR: GW_ZFI035C,GW_ZFI035C_TMP.
    GW_ZFI035C-STDAT = '999912'.
    GW_ZFI035C_TMP-EDDAT = '999912'.

    READ TABLE GT_MSLBH INTO GW_MSLBH WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR
    WERKS = G_S_TOTALS_FLAT-BWKEY.
    IF SY-SUBRC = 0.
      LC_TABIX = SY-TABIX.
    ELSE.
      DESCRIBE TABLE GT_MSLBH LINES LC_TABIX.
    ENDIF.

    LOOP AT GT_MSLBH INTO GW_MSLBH FROM LC_TABIX.
      IF GW_MSLBH-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MSLBH-WERKS = G_S_TOTALS_FLAT-BWKEY.

        L_TABIX = SY-TABIX.
        CONCATENATE GW_MSLBH-LFGJA GW_MSLBH-LFMON INTO L_CURRENT_ABPER.
        IF L_CURRENT_ABPER >= P_STDAT AND L_CURRENT_ABPER <= GW_ZFI035C-STDAT.
          GW_ZFI035C-MATNR = GW_MSLBH-MATNR.
          GW_ZFI035C-WERKS = GW_MSLBH-WERKS.
*        GW_ZFI035C-LGORT = GW_MSLBH-LGORT.
          GW_ZFI035C-CHARG = GW_MSLBH-CHARG.
          GW_ZFI035C-MENGE = GW_MSLBH-LBLAB + GW_MSLBH-LBINS.
          GW_ZFI035C-STDAT = L_CURRENT_ABPER.
*        GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_STDAT .

          IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          ENDIF.

        ENDIF.
        AT END OF CHARG.
          IF GW_ZFI035C-MATNR IS NOT INITIAL.
            GW_ZFI035C-STDAT = P_STDAT.
            APPEND GW_ZFI035C TO GT_ZFI035C.
            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-STDAT = '999912'.
        ENDAT.
        "期末
        IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C_TMP-EDDAT.
          GW_ZFI035C_TMP-MATNR = GW_MSLBH-MATNR.
          GW_ZFI035C_TMP-WERKS = GW_MSLBH-WERKS.
*        gw_zfi035c_tmp-LGORT = GW_MSLBH-LGORT.
          GW_ZFI035C_TMP-CHARG = GW_MSLBH-CHARG.
          GW_ZFI035C_TMP-MENGE = GW_MSLBH-LBLAB + GW_MSLBH-LBINS.
          GW_ZFI035C_TMP-EDDAT = L_CURRENT_ABPER.
*        gw_zfi035c_tmp-EDDAT = P_EDDAT.

          SET_DMBTR P_EDDAT .

          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C_TMP-DMBTR = GW_ZFI035C_TMP-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          ENDIF.

        ENDIF.
        AT END OF CHARG.
          IF GW_ZFI035C_TMP-MATNR IS NOT INITIAL.
            GW_ZFI035C_TMP-EDDAT = P_EDDAT.
            APPEND GW_ZFI035C_TMP TO GT_ZFI035C.
            CLEAR GW_ZFI035C_TMP-LGORT.
            COLLECT GW_ZFI035C_TMP INTO GT_ZFI035C_SUM.
          ENDIF.
          CLEAR GW_ZFI035C_TMP.
          GW_ZFI035C_TMP-EDDAT = '999912'.
        ENDAT.

        DELETE GT_MSLBH INDEX L_TABIX.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.

*    CLEAR GW_ZFI035C.
*    GW_ZFI035C-EDDAT = '999912'.
*    LOOP AT GT_MSLBH INTO GW_MSLBH WHERE MATNR = G_S_TOTALS_FLAT-MATNR
*                                   AND WERKS = G_S_TOTALS_FLAT-BWKEY.
*      CONCATENATE GW_MSLBH-LFGJA GW_MSLBH-LFMON INTO L_CURRENT_ABPER.
*      IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C-EDDAT.
*        GW_ZFI035C-MATNR = GW_MSLBH-MATNR.
*        GW_ZFI035C-WERKS = GW_MSLBH-WERKS.
**        GW_ZFI035C-LGORT = GW_MSLBH-LGORT.
*        GW_ZFI035C-CHARG = GW_MSLBH-CHARG.
*        GW_ZFI035C-MENGE = GW_MSLBH-LBLAB + GW_MSLBH-LBINS.
*        GW_ZFI035C-EDDAT = L_CURRENT_ABPER.
**        GW_ZFI035C-EDDAT = P_EDDAT.
*
*        SET_DMBTR P_EDDAT .
*
*        IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
*          GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
*        ENDIF.
*
*      ENDIF.
*      AT END OF CHARG.
*        IF GW_ZFI035C-MATNR IS NOT INITIAL.
*          GW_ZFI035C-EDDAT = P_EDDAT.
*          APPEND GW_ZFI035C TO GT_ZFI035C.
*          CLEAR GW_ZFI035C-LGORT.
*          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
*        ENDIF.
*        CLEAR GW_ZFI035C.
*        GW_ZFI035C-EDDAT = '999912'.
*      ENDAT.
*    ENDLOOP.


    READ TABLE GT_MSKU INTO GW_MSKU WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR
    WERKS = G_S_TOTALS_FLAT-BWKEY.
    IF SY-SUBRC = 0.
      LC_TABIX = SY-TABIX.
    ELSE.
      DESCRIBE TABLE GT_MSKU LINES LC_TABIX.
    ENDIF.

    LOOP AT GT_MSKU INTO GW_MSKU FROM LC_TABIX.
      IF GW_MSKU-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MSKU-WERKS = G_S_TOTALS_FLAT-BWKEY.
        L_TABIX = SY-TABIX.
        CONCATENATE GW_MSKU-LFGJA GW_MSKU-LFMON INTO L_CURRENT_ABPER.
        IF L_CURRENT_ABPER <= P_STDAT.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-MATNR = GW_MSKU-MATNR.
          GW_ZFI035C-WERKS = GW_MSKU-WERKS.
*          GW_ZFI035C-LGORT = GW_MSKU-LGORT.
          GW_ZFI035C-CHARG = GW_MSKU-CHARG.
          GW_ZFI035C-MENGE = GW_MSKU-KULAB + GW_MSKU-KUINS.
          GW_ZFI035C-STDAT = P_STDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_STDAT.
          GW_ZFI035C-STDAT = P_STDAT.

          IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          ENDIF.

          APPEND GW_ZFI035C TO GT_ZFI035C.
          CLEAR GW_ZFI035C-LGORT.
          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
        ENDIF.
        IF L_CURRENT_ABPER <= P_EDDAT.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-MATNR = GW_MSKU-MATNR.
          GW_ZFI035C-WERKS = GW_MSKU-WERKS.
*          GW_ZFI035C-LGORT = GW_MSKU-LGORT.
          GW_ZFI035C-CHARG = GW_MSKU-CHARG.
          GW_ZFI035C-MENGE = GW_MSKU-KULAB + GW_MSKU-KUINS.
          GW_ZFI035C-EDDAT = P_EDDAT.
*          GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_EDDAT .
          GW_ZFI035C-EDDAT = P_EDDAT.

          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          ENDIF.
          APPEND GW_ZFI035C TO GT_ZFI035C.
          CLEAR GW_ZFI035C-LGORT.
          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
        ENDIF.

        DELETE GT_MSKU INDEX L_TABIX.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.

    CLEAR: GW_ZFI035C,GW_ZFI035C_TMP.
    GW_ZFI035C-STDAT = '999912'.
    GW_ZFI035C_TMP-EDDAT = '999912'.

    READ TABLE GT_MSKUH INTO GW_MSKUH WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR
    WERKS = G_S_TOTALS_FLAT-BWKEY.
    IF SY-SUBRC = 0.
      LC_TABIX = SY-TABIX.
    ELSE.
      DESCRIBE TABLE GT_MSKUH LINES LC_TABIX.
    ENDIF.


    LOOP AT GT_MSKUH INTO GW_MSKUH FROM LC_TABIX.
      IF GW_MSKUH-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MSKUH-WERKS = G_S_TOTALS_FLAT-BWKEY.
        L_TABIX = SY-TABIX.

        CONCATENATE GW_MSKUH-LFGJA GW_MSKUH-LFMON INTO L_CURRENT_ABPER.
        IF L_CURRENT_ABPER >= P_STDAT AND L_CURRENT_ABPER <= GW_ZFI035C-STDAT.
          GW_ZFI035C-MATNR = GW_MSKUH-MATNR.
          GW_ZFI035C-WERKS = GW_MSKUH-WERKS.
*        GW_ZFI035C-LGORT = GW_MSKUH-LGORT.
          GW_ZFI035C-CHARG = GW_MSKUH-CHARG.
          GW_ZFI035C-MENGE = GW_MSKUH-KULAB + GW_MSKUH-KUINS.
          GW_ZFI035C-STDAT = L_CURRENT_ABPER.
*        GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_STDAT .

          IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          ENDIF.
        ENDIF.
        AT END OF CHARG.
          IF GW_ZFI035C-MATNR IS NOT INITIAL.
            GW_ZFI035C-STDAT = P_STDAT.
            APPEND GW_ZFI035C TO GT_ZFI035C.
            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-STDAT = '999912'.
        ENDAT.
        "期末
        IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C_TMP-EDDAT.
          GW_ZFI035C_TMP-MATNR = GW_MSKUH-MATNR.
          GW_ZFI035C_TMP-WERKS = GW_MSKUH-WERKS.
*        gw_zfi035c_tmp-LGORT = GW_MSKUH-LGORT.
          GW_ZFI035C_TMP-CHARG = GW_MSKUH-CHARG.
          GW_ZFI035C_TMP-MENGE = GW_MSKUH-KULAB + GW_MSKUH-KUINS.
          GW_ZFI035C_TMP-EDDAT = L_CURRENT_ABPER.
*        gw_zfi035c_tmp-EDDAT = P_EDDAT.

          SET_DMBTR P_EDDAT .

          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C_TMP-DMBTR = GW_ZFI035C_TMP-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          ENDIF.
        ENDIF.
        AT END OF CHARG.
          IF GW_ZFI035C_TMP-MATNR IS NOT INITIAL.
            GW_ZFI035C_TMP-EDDAT = P_EDDAT.
            APPEND GW_ZFI035C_TMP TO GT_ZFI035C.
            CLEAR GW_ZFI035C_TMP-LGORT.
            COLLECT GW_ZFI035C_TMP INTO GT_ZFI035C_SUM.
          ENDIF.
          CLEAR GW_ZFI035C_TMP.
          GW_ZFI035C_TMP-EDDAT = '999912'.
        ENDAT.

        DELETE GT_MSKUH INDEX L_TABIX.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.

*    CLEAR GW_ZFI035C.
*    GW_ZFI035C-EDDAT = '999912'.
*    LOOP AT GT_MSKUH INTO GW_MSKUH WHERE MATNR = G_S_TOTALS_FLAT-MATNR
*                                     AND WERKS = G_S_TOTALS_FLAT-BWKEY.
*      CONCATENATE GW_MSKUH-LFGJA GW_MSKUH-LFMON INTO L_CURRENT_ABPER.
*      IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C-EDDAT.
*        GW_ZFI035C-MATNR = GW_MSKUH-MATNR.
*        GW_ZFI035C-WERKS = GW_MSKUH-WERKS.
**        GW_ZFI035C-LGORT = GW_MSKUH-LGORT.
*        GW_ZFI035C-CHARG = GW_MSKUH-CHARG.
*        GW_ZFI035C-MENGE = GW_MSKUH-KULAB + GW_MSKUH-KUINS.
*        GW_ZFI035C-EDDAT = L_CURRENT_ABPER.
**        GW_ZFI035C-EDDAT = P_EDDAT.
*
*        SET_DMBTR P_EDDAT .
*
*        IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
*          GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
*        ENDIF.
*      ENDIF.
*      AT END OF CHARG.
*        IF GW_ZFI035C-MATNR IS NOT INITIAL.
*          GW_ZFI035C-EDDAT = P_EDDAT.
*          APPEND GW_ZFI035C TO GT_ZFI035C.
*          CLEAR GW_ZFI035C-LGORT.
*          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
*        ENDIF.
*        CLEAR GW_ZFI035C.
*        GW_ZFI035C-EDDAT = '999912'.
*      ENDAT.
*    ENDLOOP.
    "MSKA&MSKAH***
    "当前表

    READ TABLE GT_MSKA INTO GW_MSKA WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR
    WERKS = G_S_TOTALS_FLAT-BWKEY.
    IF SY-SUBRC = 0.
      LC_TABIX = SY-TABIX.
    ELSE.
      DESCRIBE TABLE GT_MSKA LINES LC_TABIX.
    ENDIF.


    LOOP AT GT_MSKA INTO GW_MSKA FROM LC_TABIX.
      IF GW_MSKA-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MSKA-WERKS = G_S_TOTALS_FLAT-BWKEY.
        L_TABIX = SY-TABIX.
        CONCATENATE GW_MSKA-LFGJA GW_MSKA-LFMON INTO L_CURRENT_ABPER.
        IF L_CURRENT_ABPER <= P_STDAT.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-MATNR = GW_MSKA-MATNR.
          GW_ZFI035C-WERKS = GW_MSKA-WERKS.
          GW_ZFI035C-LGORT = GW_MSKA-LGORT.
          GW_ZFI035C-CHARG = GW_MSKA-CHARG.
          GW_ZFI035C-MENGE = GW_MSKA-KALAB + GW_MSKA-KAINS + GW_MSKA-KASPE.
          GW_ZFI035C-STDAT = P_STDAT.
*        GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_STDAT.
          GW_ZFI035C-STDAT = P_STDAT.

          IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          ENDIF.
          APPEND GW_ZFI035C TO GT_ZFI035C.
          CLEAR GW_ZFI035C-LGORT.
          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
        ENDIF.
        IF L_CURRENT_ABPER <= P_EDDAT.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-MATNR = GW_MSKA-MATNR.
          GW_ZFI035C-WERKS = GW_MSKA-WERKS.
          GW_ZFI035C-LGORT = GW_MSKA-LGORT.
          GW_ZFI035C-CHARG = GW_MSKA-CHARG.
          GW_ZFI035C-MENGE = GW_MSKA-KALAB + GW_MSKA-KAINS + GW_MSKA-KASPE.
          GW_ZFI035C-EDDAT = P_EDDAT.
*        GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_EDDAT.
          GW_ZFI035C-EDDAT = P_EDDAT.

          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          ENDIF.
          APPEND GW_ZFI035C TO GT_ZFI035C.
          CLEAR GW_ZFI035C-LGORT.
          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
        ENDIF.
        DELETE GT_MSKA INDEX L_TABIX.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.

    CLEAR: GW_ZFI035C,GW_ZFI035C_TMP.
    GW_ZFI035C-STDAT = '999912'.
    GW_ZFI035C_TMP-EDDAT = '999912'.

    READ TABLE GT_MSKAH INTO GW_MSKAH WITH KEY
    MATNR = G_S_TOTALS_FLAT-MATNR
    WERKS = G_S_TOTALS_FLAT-BWKEY.
    IF SY-SUBRC = 0.
      LC_TABIX = SY-TABIX.
    ELSE.
      DESCRIBE TABLE GT_MSKAH LINES LC_TABIX.
    ENDIF.


    LOOP AT GT_MSKAH INTO GW_MSKAH FROM LC_TABIX.
      IF GW_MSKAH-MATNR = G_S_TOTALS_FLAT-MATNR AND GW_MSKAH-WERKS = G_S_TOTALS_FLAT-BWKEY.
        L_TABIX = SY-TABIX.
        CONCATENATE GW_MSKAH-LFGJA GW_MSKAH-LFMON INTO L_CURRENT_ABPER.
        IF L_CURRENT_ABPER >= P_STDAT AND L_CURRENT_ABPER <= GW_ZFI035C-STDAT.

          GW_ZFI035C-MATNR = GW_MSKAH-MATNR.
          GW_ZFI035C-WERKS = GW_MSKAH-WERKS.
          GW_ZFI035C-LGORT = GW_MSKAH-LGORT.
          GW_ZFI035C-CHARG = GW_MSKAH-CHARG.
          GW_ZFI035C-MENGE = GW_MSKAH-KALAB + GW_MSKAH-KAINS + GW_MSKAH-KASPE.
          GW_ZFI035C-STDAT = L_CURRENT_ABPER.
*      GW_ZFI035C-EDDAT = P_EDDAT.

          SET_DMBTR P_STDAT.

          IF GW_ZFI035K-SMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          ENDIF.
        ENDIF.
        AT END OF CHARG.
          IF GW_ZFI035C-MATNR IS NOT INITIAL.
            GW_ZFI035C-STDAT = P_STDAT.
            APPEND GW_ZFI035C TO GT_ZFI035C.
            CLEAR GW_ZFI035C-LGORT.
            COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
          ENDIF.
          CLEAR GW_ZFI035C.
          GW_ZFI035C-STDAT = '999912'.
        ENDAT.
        "期末
        IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C_TMP-EDDAT.
          GW_ZFI035C_TMP-MATNR = GW_MSKAH-MATNR.
          GW_ZFI035C_TMP-WERKS = GW_MSKAH-WERKS.
          GW_ZFI035C_TMP-LGORT = GW_MSKAH-LGORT.
          GW_ZFI035C_TMP-CHARG = GW_MSKAH-CHARG.
          GW_ZFI035C_TMP-MENGE = GW_MSKAH-KALAB + GW_MSKAH-KAINS + GW_MSKAH-KASPE.
          GW_ZFI035C_TMP-EDDAT = L_CURRENT_ABPER.
*      gw_zfi035c_tmp-EDDAT = P_EDDAT.

          SET_DMBTR P_EDDAT.

          IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
            GW_ZFI035C_TMP-DMBTR = GW_ZFI035C_TMP-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          ENDIF.
        ENDIF.
        AT END OF CHARG.
          IF GW_ZFI035C_TMP-MATNR IS NOT INITIAL.
            GW_ZFI035C_TMP-EDDAT = P_EDDAT.
            APPEND GW_ZFI035C_TMP TO GT_ZFI035C.
            CLEAR GW_ZFI035C_TMP-LGORT.
            COLLECT GW_ZFI035C_TMP INTO GT_ZFI035C_SUM.
          ENDIF.
          CLEAR GW_ZFI035C_TMP.
          GW_ZFI035C_TMP-EDDAT = '999912'.
        ENDAT.

        DELETE GT_MSKAH INDEX L_TABIX.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.

*    CLEAR GW_ZFI035C.
*    GW_ZFI035C-EDDAT = '999912'.
*    LOOP AT GT_MSKAH INTO GW_MSKAH WHERE MATNR = G_S_TOTALS_FLAT-MATNR
*                                     AND WERKS = G_S_TOTALS_FLAT-BWKEY.
*      CONCATENATE GW_MSKAH-LFGJA GW_MSKAH-LFMON INTO L_CURRENT_ABPER.
*      IF L_CURRENT_ABPER >= P_EDDAT AND L_CURRENT_ABPER <= GW_ZFI035C-EDDAT.
*        GW_ZFI035C-MATNR = GW_MSKAH-MATNR.
*        GW_ZFI035C-WERKS = GW_MSKAH-WERKS.
*        GW_ZFI035C-LGORT = GW_MSKAH-LGORT.
*        GW_ZFI035C-CHARG = GW_MSKAH-CHARG.
*        GW_ZFI035C-MENGE = GW_MSKAH-KALAB + GW_MSKAH-KAINS + GW_MSKAH-KASPE.
*        GW_ZFI035C-EDDAT = L_CURRENT_ABPER.
**      GW_ZFI035C-EDDAT = P_EDDAT.
*
*        SET_DMBTR P_EDDAT.
*
*        IF GW_ZFI035K-EMENG IS NOT INITIAL AND L_FLAG IS INITIAL.
*          GW_ZFI035C-DMBTR = GW_ZFI035C-MENGE / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
*        ENDIF.
*      ENDIF.
*      AT END OF CHARG.
*        IF GW_ZFI035C-MATNR IS NOT INITIAL.
*          GW_ZFI035C-EDDAT = P_EDDAT.
*          APPEND GW_ZFI035C TO GT_ZFI035C.
*          CLEAR GW_ZFI035C-LGORT.
*          COLLECT GW_ZFI035C INTO GT_ZFI035C_SUM.
*        ENDIF.
*        CLEAR GW_ZFI035C.
*        GW_ZFI035C-EDDAT = '999912'.
*      ENDAT.
*    ENDLOOP.
    "**********************************************************************END
  ENDLOOP.

  SORT GT_ZFI035C_SUM BY MATNR WERKS CHARG STDAT EDDAT.
  SORT GT_EBEWH_SUM BY MATNR BWKEY BWTAR.
  DELETE ADJACENT DUPLICATES FROM GT_EBEWH_SUM COMPARING MATNR BWKEY BWTAR.

  LOOP AT GT_ZFI035C INTO GW_ZFI035C.
    L_TABIX = SY-TABIX.
    GW_ZFI035C-BUKRS = P_BUKRS.
    IF GW_ZFI035C-MENGE IS INITIAL.
      DELETE GT_ZFI035C INDEX L_TABIX.
      CONTINUE.
    ENDIF.

    IF GW_ZFI035C-STDAT IS NOT INITIAL.
      GW_ZFI035C-STDAT = L_STDAT.
    ENDIF.
    READ TABLE GT_MBEW INTO GW_MBEW WITH KEY
    MATNR = GW_ZFI035C-MATNR
    BWKEY = GW_ZFI035C-WERKS BINARY SEARCH.
    IF SY-SUBRC = 0.
      READ TABLE GT_T030 INTO GW_T030 WITH KEY
      BKLAS = GW_MBEW-BKLAS BINARY SEARCH.
      IF SY-SUBRC = 0.
        GW_ZFI035C-KONTS = GW_T030-KONTS.
        READ TABLE GT_SKAT INTO GW_SKAT WITH KEY
        SAKNR = GW_ZFI035C-KONTS BINARY SEARCH.
        IF SY-SUBRC = 0.
          GW_ZFI035C-TXT50 = GW_SKAT-TXT50.
        ENDIF.
      ENDIF.
    ENDIF.

    "处理尾差
    READ TABLE GT_ZFI035C_SUM INTO GW_ZFI035C_SUM WITH KEY
    MATNR = GW_ZFI035C-MATNR
    WERKS = GW_ZFI035C-WERKS
    CHARG = GW_ZFI035C-CHARG
    STDAT = GW_ZFI035C-STDAT
    EDDAT = GW_ZFI035C-EDDAT BINARY SEARCH.
    L_TABIX = SY-TABIX.
    IF SY-SUBRC = 0.
      READ TABLE GT_EBEWH_SUM INTO GW_EBEWH_SUM WITH KEY
      MATNR = GW_ZFI035C-MATNR
      BWKEY = GW_ZFI035C-WERKS
      BWTAR = GW_ZFI035C-CHARG
      STDAT = GW_ZFI035C-STDAT
      EDDAT = GW_ZFI035C-EDDAT BINARY SEARCH.
      IF SY-SUBRC = 0.
        GW_ZFI035C-DMBTR = GW_ZFI035C-DMBTR + GW_ZFI035C_SUM-DMBTR - GW_EBEWH_SUM-SALK3.
      ENDIF.
      DELETE GT_ZFI035C_SUM INDEX L_TABIX.
    ENDIF.

    READ TABLE GT_MAKT INTO GW_MAKT WITH KEY
    MATNR = GW_ZFI035C-MATNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035C-MAKTX = GW_MAKT-MAKTX.
    ENDIF.

    CLEAR: L_STRING.
    SPLIT GW_ZFI035C-MAKTX AT '\' INTO L_STRING GW_ZFI035C-ZGZLX L_STRING.

    IF NOT GW_ZFI035C-CHARG IS INITIAL.
      CALL FUNCTION 'VB_BATCH_2_CLASS_OBJECT'
        EXPORTING
          I_MATNR = GW_ZFI035C-MATNR
          I_CHARG = GW_ZFI035C-CHARG
          I_WERKS = GW_ZFI035C-WERKS
        IMPORTING
          E_OBJEK = LF_OBJEK
          E_OBTAB = LF_OBTAB
          E_KLART = LF_KLART
          E_CLASS = LF_CLASS.
*START********************获取批次特性****************************START*
      IF  NOT LF_OBJEK IS INITIAL.
        CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
          EXPORTING
            OBJECTKEY       = LF_OBJEK
            OBJECTTABLE     = LF_OBTAB
            CLASSNUM        = LF_CLASS
            CLASSTYPE       = LF_KLART
*       IMPORTING
*           STATUS          =
*           STANDARDCLASS   =
          TABLES
            ALLOCVALUESNUM  = LT_NUM
            ALLOCVALUESCHAR = LT_CHAR
            ALLOCVALUESCURR = LT_CURR
            RETURN          = LT_RETURN.
*START********************批次特性赋值****************************START*
        IF SY-SUBRC = 0.
          LOOP AT LT_CHAR.
            CASE LT_CHAR-CHARACT.
              WHEN 'Z_BAT_WJ'.  "实际外径
                GW_ZFI035C-Z_BAT_WJ = LT_CHAR-VALUE_NEUTRAL.
              WHEN 'Z_BAT_BH'.  "实际壁厚
                GW_ZFI035C-Z_BAT_BH = LT_CHAR-VALUE_NEUTRAL.
              WHEN OTHERS.
            ENDCASE.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
*******************取批次特性-外径，壁厚************************END
    MODIFY GT_ZFI035C FROM GW_ZFI035C.
  ENDLOOP.

  "将内表G_T_BELEGE1中的数据处理后放到内表GT_ZFI035P中
  LOOP AT G_T_BELEGE1 INTO G_S_BELEGE1.
    CLEAR GW_ZFI035P.
    GW_ZFI035P-MATNR = G_S_BELEGE1-MATNR.
    GW_ZFI035P-BUKRS = G_S_BELEGE1-BUKRS.
    GW_ZFI035P-WERKS = G_S_BELEGE1-WERKS.
    GW_ZFI035P-LGORT = G_S_BELEGE1-LGORT.
    GW_ZFI035P-CHARG = G_S_BELEGE1-CHARG.
    GW_ZFI035P-BUDAT = G_S_BELEGE1-BUDAT.
    GW_ZFI035P-BELNR = G_S_BELEGE1-BELNR.
    GW_ZFI035P-GJAHR = G_S_BELEGE1-GJAHR.
    GW_ZFI035P-BUZEI = G_S_BELEGE1-BUZEI.
    GW_ZFI035P-STDAT = L_STDAT.
    GW_ZFI035P-EDDAT = P_EDDAT.
    GW_ZFI035P-MBLNR = G_S_BELEGE1-MBLNR.
    GW_ZFI035P-MJAHR = G_S_BELEGE1-MJAHR.
    GW_ZFI035P-ZEILE = G_S_BELEGE1-ZEILE.
    GW_ZFI035P-MENGE = G_S_BELEGE1-MENGE.
    GW_ZFI035P-MEINS = G_S_BELEGE1-MEINS.
    GW_ZFI035P-DMBTR = G_S_BELEGE1-DMBTR.
    GW_ZFI035P-WAERS = G_S_BELEGE1-WAERS.
    GW_ZFI035P-BWART = G_S_BELEGE1-BWART.
    GW_ZFI035P-BWTAR = G_S_BELEGE1-CHARG.
    GW_ZFI035P-KZBEW = G_S_BELEGE1-KZBEW.
    GW_ZFI035P-SOBKZ = G_S_BELEGE1-SOBKZ.
    GW_ZFI035P-SHKZG = G_S_BELEGE1-SHKZG.

    READ TABLE GT_BSEG INTO GW_BSEG WITH KEY
    BUKRS = GW_ZFI035P-BUKRS
    GJAHR = GW_ZFI035P-GJAHR
    BELNR = GW_ZFI035P-BELNR
    BUZEI = GW_ZFI035P-BUZEI BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035P-XNEGP = GW_BSEG-XNEGP.
    ENDIF.

    IF GW_ZFI035P-BWART IS INITIAL.
      GW_ZFI035P-ZFLAG = 'X'.
    ENDIF.

    READ TABLE GT_MBEW INTO GW_MBEW WITH KEY
              MATNR = GW_ZFI035P-MATNR
              BWKEY = GW_ZFI035P-WERKS BINARY SEARCH.
    IF SY-SUBRC = 0.
      READ TABLE GT_T030 INTO GW_T030 WITH KEY
      BKLAS = GW_MBEW-BKLAS BINARY SEARCH.
      IF SY-SUBRC = 0.
        GW_ZFI035P-KONTS = GW_T030-KONTS.
        READ TABLE GT_SKAT INTO GW_SKAT WITH KEY
        SAKNR = GW_ZFI035P-KONTS BINARY SEARCH.
        IF SY-SUBRC = 0.
          GW_ZFI035P-TXT50 = GW_SKAT-TXT50.
        ENDIF.
      ENDIF.
    ENDIF.

    READ TABLE GT_MAKT INTO GW_MAKT WITH KEY
    MATNR = GW_ZFI035P-MATNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035P-MAKTX = GW_MAKT-MAKTX.
    ENDIF.

    CLEAR: L_STRING.
    SPLIT GW_ZFI035P-MAKTX AT '\' INTO L_STRING GW_ZFI035P-ZGZLX L_STRING.
*******************取批次特性-外径，壁厚**********************START
    IF NOT GW_ZFI035P-CHARG IS INITIAL.
      CALL FUNCTION 'VB_BATCH_2_CLASS_OBJECT'
        EXPORTING
          I_MATNR = GW_ZFI035P-MATNR
          I_CHARG = GW_ZFI035P-CHARG
          I_WERKS = GW_ZFI035P-WERKS
        IMPORTING
          E_OBJEK = LF_OBJEK
          E_OBTAB = LF_OBTAB
          E_KLART = LF_KLART
          E_CLASS = LF_CLASS.
*START********************获取批次特性****************************START*
      IF  NOT LF_OBJEK IS INITIAL.
        CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
          EXPORTING
            OBJECTKEY       = LF_OBJEK
            OBJECTTABLE     = LF_OBTAB
            CLASSNUM        = LF_CLASS
            CLASSTYPE       = LF_KLART
*       IMPORTING
*           STATUS          =
*           STANDARDCLASS   =
          TABLES
            ALLOCVALUESNUM  = LT_NUM
            ALLOCVALUESCHAR = LT_CHAR
            ALLOCVALUESCURR = LT_CURR
            RETURN          = LT_RETURN.
*START********************批次特性赋值****************************START*
        IF SY-SUBRC = 0.
          LOOP AT LT_CHAR.
            CASE LT_CHAR-CHARACT.
              WHEN 'Z_BAT_WJ'.  "实际外径
                GW_ZFI035P-Z_BAT_WJ = LT_CHAR-VALUE_NEUTRAL.
              WHEN 'Z_BAT_BH'.  "实际壁厚
                GW_ZFI035P-Z_BAT_BH = LT_CHAR-VALUE_NEUTRAL.
              WHEN OTHERS.
            ENDCASE.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
*******************取批次特性-外径，壁厚************************END

*    GW_ZFI035P-ISKGS = G_S_BELEGE1-ISKGS.
**********************暂时注释掉********************
*    CLEAR L_ZKGSB.
*    READ TABLE GT_MSEG INTO GW_MSEG WITH KEY
*        MBLNR = GW_ZFI035P-MBLNR
*        MJAHR = GW_ZFI035P-MJAHR
*        ZEILE = GW_ZFI035P-ZEILE BINARY SEARCH.
*    IF SY-SUBRC = 0 AND GW_MSEG-WERKS+0(2) = GW_MSEG-UMWRK+0(2).
*      L_ZKGSB = 'X'.
*    ENDIF.
*    READ TABLE GT_ZMVGRP INTO GW_ZMVGRP WITH KEY
*    BWART = GW_ZFI035P-BWART
*    KZBEW = GW_ZFI035P-KZBEW
*    SOBKZ = GW_ZFI035P-SOBKZ
*    SHKZG = GW_ZFI035P-SHKZG
*    ZKGSB = L_ZKGSB
*    LGORT = GW_ZFI035P-LGORT BINARY SEARCH.
*    IF SY-SUBRC = 0.
*      GW_ZFI035P-MVGRP = GW_ZMVGRP-MVGRP.
*    ENDIF.
*****************************************************
    "根据移动类型和库位等决定所属物料组
    CASE GW_ZFI035P-BWART.
      WHEN '101' OR '102'.
        IF G_S_BELEGE1-KZBEW = 'F'.
          GW_ZFI035P-MVGRP = '41'.
        ELSE.
          GW_ZFI035P-MVGRP = '11'.
        ENDIF.
      WHEN '122'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '51'.
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '11'.
        ENDIF.
      WHEN '103' OR '104' OR '105' OR '106'.
        GW_ZFI035P-MVGRP = '11'.
      WHEN '161'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '11'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '20'.
        ENDIF.
      WHEN '162'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '11'.
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '20'.
        ENDIF.
      WHEN '201' OR '202' OR '241' OR '242' OR 'Z03' OR 'Z04' OR 'Z25' OR 'Z26' OR 'Z27'
        OR 'Z28' OR 'Z29' OR 'Z30' OR 'Z31' OR 'Z32' OR 'Z33' OR 'Z34' OR 'Z35' OR 'Z36'
        OR 'Z45' OR 'Z46' OR 'Z47' OR 'Z48'.
        GW_ZFI035P-MVGRP = '32'.
      WHEN '261' OR '262'.
        GW_ZFI035P-MVGRP = '31'.
      WHEN '301' OR 'Z81'.
        READ TABLE GT_MSEG INTO GW_MSEG WITH KEY
        MBLNR = GW_ZFI035P-MBLNR
        MJAHR = GW_ZFI035P-MJAHR
        ZEILE = GW_ZFI035P-ZEILE BINARY SEARCH.
        IF SY-SUBRC = 0.
          IF GW_MSEG-WERKS+0(2) = GW_MSEG-UMWRK+0(2) AND G_S_BELEGE1-SHKZG = 'S'.
            GW_ZFI035P-MVGRP = '21'.
          ELSEIF GW_MSEG-WERKS+0(2) = GW_MSEG-UMWRK+0(2) AND G_S_BELEGE1-SHKZG = 'H'.
            GW_ZFI035P-MVGRP = '20'.
          ELSE.
            IF G_S_BELEGE1-SHKZG = 'S'.
              GW_ZFI035P-MVGRP = '11'.
            ELSEIF G_S_BELEGE1-SHKZG = 'H'.
              GW_ZFI035P-MVGRP = '51'.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN '411'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ENDIF.
      WHEN '412'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '23'.
        ENDIF.
      WHEN '413' OR '511'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '20'..
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '21'.
        ENDIF.
      WHEN '414' OR '512'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '21'..
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '20'.
        ENDIF.
      WHEN '531' OR '532' OR 'Z01' OR 'Z02'
        OR 'Z13' OR 'Z14' OR 'Z15' OR 'Z16'.
        GW_ZFI035P-MVGRP = '42'.
      WHEN '541'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '53'..
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '52'.
        ENDIF.
      WHEN '542'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '52'..
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '53'.
        ENDIF.
      WHEN '543' OR '544'.
        GW_ZFI035P-MVGRP = '53'.
      WHEN '545' OR '546'.
        GW_ZFI035P-MVGRP = '52'.
      WHEN '561' OR '562'.
        GW_ZFI035P-MVGRP = '61'.
      WHEN '601' OR '602' OR 'Z17' OR 'Z18'
        OR 'Z39' OR 'Z40' OR 'Z41' OR 'Z42'.
        GW_ZFI035P-MVGRP = '51'.
      WHEN 'Z21'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '51'.
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '21'.
        ENDIF.
      WHEN 'Z22'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '21'.
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '51'.
        ENDIF.
      WHEN '631' OR '633' OR '653'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '51'..
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '61'.
        ENDIF.
      WHEN '632' OR '634' OR '654'.
        IF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '61'..
        ELSEIF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '51'.
        ENDIF.
      WHEN '701' OR 'Z37' OR 'Z38'.
        GW_ZFI035P-MVGRP = '62'.
      WHEN '702' OR 'Z44'.
        GW_ZFI035P-MVGRP = '63'.
      WHEN 'Z43'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '62'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '63'.
        ENDIF.
      WHEN 'Z05'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '33'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '34'.
        ENDIF.
      WHEN 'Z06'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '34'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '33'.
        ENDIF.
      WHEN 'Z19' OR 'Z23'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '54'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '55'.
        ENDIF.
      WHEN 'Z20' OR 'Z24'.
        IF G_S_BELEGE1-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '55'.
        ELSEIF G_S_BELEGE1-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '54'.
        ENDIF.
      WHEN '302' OR 'Z82'.
        READ TABLE GT_MSEG INTO GW_MSEG WITH KEY
        MBLNR = G_S_BELEGE1-MBLNR
        MJAHR = G_S_BELEGE1-MJAHR
        ZEILE = G_S_BELEGE1-ZEILE BINARY SEARCH.
        IF SY-SUBRC = 0.
          IF GW_MSEG-WERKS+0(2) = GW_MSEG-UMWRK+0(2) AND G_S_BELEGE1-SHKZG = 'H'.
            GW_ZFI035P-MVGRP = '21'.
          ELSEIF GW_MSEG-WERKS+0(2) = GW_MSEG-UMWRK+0(2) AND G_S_BELEGE1-SHKZG = 'S'.
            GW_ZFI035P-MVGRP = '20'.
          ELSE.
            IF G_S_BELEGE1-SHKZG = 'S'.
              GW_ZFI035P-MVGRP = '51'.
            ELSEIF G_S_BELEGE1-SHKZG = 'H'.
              GW_ZFI035P-MVGRP = '11'.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN '309'.
        IF GW_ZFI035P-LGORT IN SS_LGORT AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '21'.
        ELSEIF GW_ZFI035P-LGORT IN SS_LGORT AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF ( GW_ZFI035P-LGORT = '1300' OR GW_ZFI035P-LGORT = '1400'
          OR GW_ZFI035P-LGORT = '1500' ) AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF ( GW_ZFI035P-LGORT = '1300' OR GW_ZFI035P-LGORT = '1400'
          OR GW_ZFI035P-LGORT = '1500' ) AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '24'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '43'.
        ENDIF.
      WHEN '310'.
        IF GW_ZFI035P-LGORT IN SS_LGORT AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT IN SS_LGORT AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '21'.

        ELSEIF ( GW_ZFI035P-LGORT = '1300' OR GW_ZFI035P-LGORT = '1400'
        OR GW_ZFI035P-LGORT = '1500' ) AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF ( GW_ZFI035P-LGORT = '1300' OR GW_ZFI035P-LGORT = '1400'
          OR GW_ZFI035P-LGORT = '1500' ) AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '24'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '43'.
        ENDIF.
      WHEN '311'.
        IF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
           OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
           OR GW_ZFI035P-LGORT = '2600') AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '21'.
        ELSEIF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
          OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
          OR GW_ZFI035P-LGORT = '2600') AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '20'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '24'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '43'.
        ENDIF.
      WHEN '312'.
        IF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
           OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
           OR GW_ZFI035P-LGORT = '2600') AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '21'.
        ELSEIF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
           OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
           OR GW_ZFI035P-LGORT = '2600') AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '20'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '24'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '43'.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
    CLEAR G_S_BELEGE1.
    APPEND GW_ZFI035P TO GT_ZFI035P.
  ENDLOOP.
  "将内表GT_MSEG_311中的数据放到内表GT_ZFI035P中
  LOOP AT GT_MSEG_311 INTO GW_MSEG_311.
    L_CURRENT_ABPER = GW_MSEG_311-BUDAT_MKPF+0(6).
    L_TABIX = SY-TABIX.
    IF L_CURRENT_ABPER <= P_STDAT OR L_CURRENT_ABPER > P_EDDAT.
      DELETE GT_MSEG_311 INDEX L_TABIX.
      CONTINUE.
    ENDIF.
    CLEAR GW_ZFI035P.
    GW_ZFI035P-ZMSEG = 'X'.
    GW_ZFI035P-MATNR = GW_MSEG_311-MATNR.
    GW_ZFI035P-BUKRS = GW_MSEG_311-BUKRS.
    GW_ZFI035P-WERKS = GW_MSEG_311-WERKS.
    GW_ZFI035P-LGORT = GW_MSEG_311-LGORT.
    GW_ZFI035P-CHARG = GW_MSEG_311-CHARG.
    GW_ZFI035P-BUDAT = GW_MSEG_311-BUDAT_MKPF.
    GW_ZFI035P-BELNR = GW_MSEG_311-BELNR.
    GW_ZFI035P-GJAHR = GW_MSEG_311-GJAHR.
    GW_ZFI035P-BUZEI = GW_MSEG_311-BUZEI.
    GW_ZFI035P-STDAT = L_STDAT.
    GW_ZFI035P-EDDAT = P_EDDAT.
    GW_ZFI035P-MBLNR = GW_MSEG_311-MBLNR.
    GW_ZFI035P-MJAHR = GW_MSEG_311-MJAHR.
    GW_ZFI035P-ZEILE = GW_MSEG_311-ZEILE.
    GW_ZFI035P-MENGE = GW_MSEG_311-MENGE.
    GW_ZFI035P-MEINS = GW_MSEG_311-MEINS.
    GW_ZFI035P-DMBTR = GW_MSEG_311-DMBTR.

    IF GW_MSEG_311-SHKZG = 'H'.
      GW_ZFI035P-DMBTR = GW_ZFI035P-DMBTR * -1.
      GW_ZFI035P-MENGE = GW_ZFI035P-MENGE * -1.
    ENDIF.

    GW_ZFI035P-WAERS = GW_MSEG_311-WAERS.
    GW_ZFI035P-BWART = GW_MSEG_311-BWART.
    GW_ZFI035P-BWTAR = GW_MSEG_311-BWTAR.

    IF GW_ZFI035P-BWTAR IS INITIAL.
      GW_ZFI035P-BWTAR = GW_ZFI035P-CHARG.
    ENDIF.

    GW_ZFI035P-KZBEW = GW_MSEG_311-KZBEW.
    GW_ZFI035P-SOBKZ = GW_MSEG_311-SOBKZ.
    GW_ZFI035P-SHKZG = GW_MSEG_311-SHKZG.

    READ TABLE GT_BSEG INTO GW_BSEG WITH KEY
    BUKRS = GW_ZFI035P-BUKRS
    GJAHR = GW_ZFI035P-GJAHR
    BELNR = GW_ZFI035P-BELNR
    BUZEI = GW_ZFI035P-BUZEI BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035P-XNEGP = GW_BSEG-XNEGP.
    ENDIF.

    READ TABLE GT_MBEW INTO GW_MBEW WITH KEY
              MATNR = GW_ZFI035P-MATNR
              BWKEY = GW_ZFI035P-WERKS BINARY SEARCH.
    IF SY-SUBRC = 0.
      READ TABLE GT_T030 INTO GW_T030 WITH KEY
      BKLAS = GW_MBEW-BKLAS BINARY SEARCH.
      IF SY-SUBRC = 0.
        GW_ZFI035P-KONTS = GW_T030-KONTS.
        READ TABLE GT_SKAT INTO GW_SKAT WITH KEY
        SAKNR = GW_ZFI035P-KONTS BINARY SEARCH.
        IF SY-SUBRC = 0.
          GW_ZFI035P-TXT50 = GW_SKAT-TXT50.
        ENDIF.
      ENDIF.
    ENDIF.

    READ TABLE GT_MAKT INTO GW_MAKT WITH KEY
    MATNR = GW_ZFI035P-MATNR BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035P-MAKTX = GW_MAKT-MAKTX.
    ENDIF.

    CLEAR: L_STRING.
    SPLIT GW_ZFI035P-MAKTX AT '\' INTO L_STRING GW_ZFI035P-ZGZLX L_STRING.
*******************取批次特性-外径，壁厚**********************START
    IF NOT GW_ZFI035P-CHARG IS INITIAL.
      CALL FUNCTION 'VB_BATCH_2_CLASS_OBJECT'
        EXPORTING
          I_MATNR = GW_ZFI035P-MATNR
          I_CHARG = GW_ZFI035P-CHARG
          I_WERKS = GW_ZFI035P-WERKS
        IMPORTING
          E_OBJEK = LF_OBJEK
          E_OBTAB = LF_OBTAB
          E_KLART = LF_KLART
          E_CLASS = LF_CLASS.
*START********************获取批次特性****************************START*
      IF  NOT LF_OBJEK IS INITIAL.
        CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
          EXPORTING
            OBJECTKEY       = LF_OBJEK
            OBJECTTABLE     = LF_OBTAB
            CLASSNUM        = LF_CLASS
            CLASSTYPE       = LF_KLART
*       IMPORTING
*           STATUS          =
*           STANDARDCLASS   =
          TABLES
            ALLOCVALUESNUM  = LT_NUM
            ALLOCVALUESCHAR = LT_CHAR
            ALLOCVALUESCURR = LT_CURR
            RETURN          = LT_RETURN.
*START********************批次特性赋值****************************START*
        IF SY-SUBRC = 0.
          LOOP AT LT_CHAR.
            CASE LT_CHAR-CHARACT.
              WHEN 'Z_BAT_WJ'.  "实际外径
                GW_ZFI035P-Z_BAT_WJ = LT_CHAR-VALUE_NEUTRAL.
              WHEN 'Z_BAT_BH'.  "实际壁厚
                GW_ZFI035P-Z_BAT_BH = LT_CHAR-VALUE_NEUTRAL.
              WHEN OTHERS.
            ENDCASE.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
*******************取批次特性-外径，壁厚************************END
    CASE GW_ZFI035P-BWART.
      WHEN '311'.
        IF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
           OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
           OR GW_ZFI035P-LGORT = '2600') AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '21'.
        ELSEIF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
          OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
          OR GW_ZFI035P-LGORT = '2300') AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '20'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '24'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '43'.
        ENDIF.
      WHEN '312'.
        IF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
          OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
          OR GW_ZFI035P-LGORT = '2300') AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '21'.
        ELSEIF ( GW_ZFI035P-LGORT = '1000' OR GW_ZFI035P-LGORT = '2000'
           OR GW_ZFI035P-LGORT = '2200' OR GW_ZFI035P-LGORT = '2300'
           OR GW_ZFI035P-LGORT = '2300') AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '20'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '1400' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '23'.
        ELSEIF GW_ZFI035P-LGORT = '1300' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '22'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '24'.
        ELSEIF GW_ZFI035P-LGORT = '2100' AND GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '43'.
        ENDIF.
      WHEN '541'.
        IF GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '53'..
        ELSEIF GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '52'.
        ENDIF.
      WHEN '542'.
        IF GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '52'..
        ELSEIF GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '53'.
        ENDIF.
      WHEN '413'.
        IF GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '20'..
        ELSEIF GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '21'.
        ENDIF.
      WHEN '414'.
        IF GW_ZFI035P-SHKZG = 'H'.
          GW_ZFI035P-MVGRP = '21'..
        ELSEIF GW_ZFI035P-SHKZG = 'S'.
          GW_ZFI035P-MVGRP = '20'.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

    APPEND GW_ZFI035P TO GT_ZFI035P.
  ENDLOOP.

  CALL FUNCTION 'DATE_GET_MONTH_LASTDAY'
    EXPORTING
      I_DATE = L_TEMP
    IMPORTING
      E_DATE = L_TEMP.

  L_TEMP = L_TEMP + 1.
  P_STDAT = L_TEMP+0(6).

  MODIFY ZFI035K FROM TABLE GT_ZFI035K.
  IF SY-SUBRC = 0.
    COMMIT WORK AND WAIT.
  ELSE.
    ROLLBACK WORK.
  ENDIF.

  MODIFY ZFI035P FROM TABLE GT_ZFI035P.
  IF SY-SUBRC = 0.
    COMMIT WORK AND WAIT.
  ELSE.
    ROLLBACK WORK.
  ENDIF.

  MODIFY ZFI035C FROM TABLE GT_ZFI035C.
  IF SY-SUBRC = 0.
    COMMIT WORK AND WAIT.
  ELSE.
    ROLLBACK WORK.
  ENDIF.
ENDFORM.                    " FRM_IMPORT_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_EXPORT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_EXPORT_DATA.
  DATA: L_DATUM LIKE SY-DATUM.
  CLEAR: S_DATUM,S_DATUM[].

  CONCATENATE P_STDAT '01' INTO S_DATUM-LOW.
  CONCATENATE P_EDDAT '01' INTO S_DATUM-HIGH.
  CALL FUNCTION 'DATE_GET_MONTH_LASTDAY'
    EXPORTING
      I_DATE = S_DATUM-HIGH
    IMPORTING
      E_DATE = S_DATUM-HIGH.
  S_DATUM-SIGN = 'I'.
  S_DATUM-OPTION = 'BT'.
  APPEND S_DATUM.

  BWBST = 'X'.
  PA_SUMFL = 'X'.
  PA_DBSTD = 'X'.

  CLEAR S_BUKRS.
  S_BUKRS-SIGN = 'I'.
  S_BUKRS-OPTION = 'EQ'.
  S_BUKRS-LOW = P_BUKRS.
  APPEND S_BUKRS.
  "汇总
**********************************************
*  EXPORT A = S_MATNR
*         B = S_BUKRS
*         C = S_WERKS
*         D = S_DATUM[]
*         E = BWBST
*         F = PA_SUMFL
*         G = PA_DBSTD TO MEMORY ID 'MB5B'.
*  SUBMIT RM07MLBD AND RETURN.
**********************************************
  SUBMIT RM07MLBD WITH BUKRS = P_BUKRS
                  WITH MATNR IN S_MATNR[]
                  WITH WERKS IN S_WERKS[]
                  WITH DATUM IN S_DATUM[]
                  WITH LGBST = ''
                  WITH BWBST = 'X'
                  WITH SBBST = ''
                  WITH PA_SUMFL = 'X'
                  WITH PA_WDZER = 'X'
                  WITH PA_WDZEW = 'X'
                  WITH PA_WDWIZ = 'X'
                  WITH PA_WDWUW = 'X'
                  WITH PA_WDWEW = 'X'
                  WITH PA_NDZER = 'X'
                  WITH PA_NDSTO = 'X'
                  WITH PA_DBSTD = 'X'
                  AND RETURN.
************************d**************************
*  CLEAR PA_SUMFL.
*  "明细
*  EXPORT A = S_MATNR
*         B = S_BUKRS
*         C = S_WERKS
*         D = S_DATUM[]
*         E = BWBST
*         F = PA_SUMFL
*         G = PA_DBSTD TO MEMORY ID 'MB5B'.
*  SUBMIT RM07MLBD AND RETURN.
************************d**************************
  SUBMIT RM07MLBD WITH BUKRS = P_BUKRS
                  WITH MATNR IN S_MATNR[]
                  WITH WERKS IN S_WERKS[]
                  WITH DATUM IN S_DATUM[]
                  WITH LGBST = ''
                  WITH BWBST = 'X'
                  WITH SBBST = ''
*                  WITH BWBST = 'X'
                  WITH PA_WDZER = 'X'
                  WITH PA_WDZEW = 'X'
                  WITH PA_WDWIZ = 'X'
                  WITH PA_WDWUW = 'X'
                  WITH PA_WDWEW = 'X'
                  WITH PA_NDZER = 'X'
                  WITH PA_NDSTO = 'X'
                  WITH PA_SUMFL = ''
                  WITH PA_DBSTD = 'X'
                  AND RETURN.
*  LW_ZFI035T-UZEIT_P_E = SY-UZEIT.
ENDFORM.                    " FRM_EXPORT_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA .
  CLEAR: GT_ZFI035K,GT_ZFI035P,GT_ZFI035C.
  SELECT *
    FROM ZFI035K
    INTO CORRESPONDING FIELDS OF TABLE GT_ZFI035K
    WHERE MATNR IN S_MATNR
      AND WERKS IN S_WERKS
      AND STDAT = P_STDAT
      AND EDDAT = P_EDDAT.
  SELECT *
    FROM ZFI035P
    INTO CORRESPONDING FIELDS OF TABLE GT_ZFI035P
    WHERE MATNR IN S_MATNR
      AND BUKRS IN S_BUKRS
      AND WERKS IN S_WERKS
      AND LGORT IN S_LGORT
      AND STDAT = P_STDAT
      AND EDDAT = P_EDDAT.

  SELECT *
    FROM ZFI035C
    INTO CORRESPONDING FIELDS OF TABLE GT_ZFI035C
    WHERE MATNR IN S_MATNR
      AND BUKRS IN S_BUKRS
      AND WERKS IN S_WERKS
      AND LGORT IN S_LGORT
      AND STDAT = P_STDAT.

  IF NOT GT_ZFI035P IS INITIAL.
    SELECT
      BWART
      XSTBW
      FROM T156
      INTO CORRESPONDING FIELDS OF TABLE GT_T156
      FOR ALL ENTRIES IN GT_ZFI035P
      WHERE BWART = GT_ZFI035P-BWART.
  ENDIF.

*  TRY.
*      GET BADI GR_BADI_RM07MLBD_DBSYS_OPT
*        FILTERS
*          DBSYS_TYPE = CL_DB_SYS=>DBSYS_TYPE.
*      GV_NEWDB = ABAP_TRUE.
*    CATCH CX_BADI_NOT_IMPLEMENTED
*          CX_BADI_MULTIPLY_IMPLEMENTED
*          CX_BADI_FILTER_ERROR.
*      GV_NEWDB = ABAP_FALSE.
*  ENDTRY.

*  TRY.
*      CALL BADI GR_BADI_RM07MLBD_DBSYS_OPT->CALCULATE_STOCKS
*        EXPORTING
*          IT_MATERIAL          = ST_MATNR[]
*          IT_COMPANY_CODE      = ST_BUKRS[]
*          IT_PLANT             = ST_WERKS[]
*          IT_STORAGE_LOCATION  = GT_LGORT[]
*          IT_BATCH             = GT_CHARG[]
*          IT_VALUATION_TYPE    = GT_BWTAR[]
*          IT_MOVEMENT_TYPE     = GT_BWART[]
*          IT_POSTING_DATE      = ST_BUDAT[]
*          IV_SPECIAL_STOCK_IND = ''
*          IV_BATCH_STOCK       = ''
*          IV_VALUATED_STOCK    = 'X'
*          IV_SPECIAL_STOCK     = ''
*          IV_BATCH_MAT_ONLY    = ''
*          IV_BATCH_NO_MCHB     = ''
*          IV_NO_REVERSALS      = ''
*        IMPORTING
*          ET_STOCK_INVENTORY   = GT_STOCK_INVENTORY
*          EV_NO_DBSYS_OPT      = GV_NO_DBSYS_OPT.
*    CATCH CX_BADI.
**      IF P_AUT EQ SPACE.
**** Code injection for ABAP UNIT TEST
**** see local class of CL_IM_RM07MLBD_DBSYS_OPT
**** The Unittest shall result in an error in case of error in BADI
**        GV_NEWDB = ABAP_FALSE.
**      ENDIF.
***      APPEND LINES OF GT_STOCK TO GT_STOCK_INVENTORY.
*  ENDTRY.

ENDFORM.                    " FRM_GET_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_DEAL_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA .
  DATA: L_MATNR TYPE MARA-MATNR,
        L_BUKRS TYPE T001-BUKRS,
        L_WERKS TYPE T001W-WERKS,
        L_LGORT TYPE MARD-LGORT,
        L_CHARG TYPE MSEG-CHARG,
        L_MENGE TYPE MSEG-MENGE,
        L_DMBTR TYPE MSEG-DMBTR.

  DATA: L_S TYPE MSEG-DMBTR,
        L_H TYPE MSEG-DMBTR.

  DATA: L_TABIX LIKE SY-TABIX.

  SORT GT_ZFI035K BY MATNR BUKRS WERKS LGORT.
  SORT GT_MSEG BY MBLNR GJAHR ZEILE.
  SORT GT_MAKT BY MATNR.

  CLEAR: GT_SUM_DATA,GT_SUM_BELNR,GT_SUM_MBLNR.

  LOOP AT GT_ZFI035P INTO GW_ZFI035P.
    L_TABIX = SY-TABIX.
    "汇总只有会计凭证的数量和金额*************************START
    CLEAR: GW_SUM_MBLNR,GW_SUM_BELNR.
    IF GW_ZFI035P-ZFLAG = 'X'.
      GW_SUM_BELNR-MATNR = GW_ZFI035P-MATNR.
      GW_SUM_BELNR-WERKS = GW_ZFI035P-WERKS.
      GW_SUM_BELNR-MENGE = GW_ZFI035P-MENGE.
      GW_SUM_BELNR-DMBTR = GW_ZFI035P-DMBTR.
      GW_SUM_BELNR-SHKZG = GW_ZFI035P-SHKZG.
      COLLECT GW_SUM_BELNR INTO GT_SUM_BELNR.
      CONTINUE.
    ENDIF.
    "********************************************************END
    CLEAR GW_SUM_DATA.
    IF GW_ZFI035P-LGORT NOT IN S_LGORT.
      DELETE GT_ZFI035P INDEX L_TABIX.
      CONTINUE.
    ENDIF.
    GW_SUM_DATA-ZGZLX = GW_ZFI035P-ZGZLX. "钢种
    GW_SUM_DATA-Z_BAT_WJ = GW_ZFI035P-Z_BAT_WJ."外径
    GW_SUM_DATA-Z_BAT_BH = GW_ZFI035P-Z_BAT_BH."壁厚
    GW_SUM_DATA-LGORT = GW_ZFI035P-LGORT. "库位
    GW_SUM_DATA-CHARG = GW_ZFI035P-CHARG. "批次
    GW_SUM_DATA-BWTAR = GW_ZFI035P-BWTAR. "评估类型
    GW_SUM_DATA-MATNR = GW_ZFI035P-MATNR. "物料号
    GW_SUM_DATA-MAKTX = GW_ZFI035P-MAKTX. "物料描述
    GW_SUM_DATA-BUKRS = GW_ZFI035P-BUKRS. "公司
    GW_SUM_DATA-WERKS = GW_ZFI035P-WERKS. "工厂
    GW_SUM_DATA-KONTS = GW_ZFI035P-KONTS. "科目
    GW_SUM_DATA-TXT50 = GW_ZFI035P-TXT50. "科目描述
*    GW_SUM_DATA-SOBKZ = GW_ZFI035P-SOBKZ. "特殊库存标识
*    GW_SUM_DATA-MVGRP = GW_ZFI035P-MVGRP. "移动组                        "HANDWY
    GW_SUM_DATA-MENGE = GW_ZFI035P-MENGE. "数量
    GW_SUM_DATA-DMBTR = GW_ZFI035P-DMBTR. "金额
    COLLECT GW_SUM_DATA INTO GT_SUM_DATA.
  ENDLOOP.
  CLEAR: GT_ALV.
  LOOP AT GT_ZFI035C INTO GW_ZFI035C.
    GW_ALV-MATNR = GW_ZFI035C-MATNR.
    GW_ALV-MAKTX = GW_ZFI035C-MAKTX.
    GW_ALV-BUKRS = GW_ZFI035C-BUKRS.
    GW_ALV-WERKS = GW_ZFI035C-WERKS.
    GW_ALV-LGORT = GW_ZFI035C-LGORT.
    GW_ALV-CHARG = GW_ZFI035C-CHARG.
    GW_ALV-ZGZLX = GW_ZFI035C-ZGZLX.
    GW_ALV-Z_BAT_WJ = GW_ZFI035C-Z_BAT_WJ.
    GW_ALV-Z_BAT_BH = GW_ZFI035C-Z_BAT_BH.
    GW_ALV-KONTS = GW_ZFI035C-KONTS.
    GW_ALV-TXT50 = GW_ZFI035C-TXT50.
    GW_ALV-BMENG = GW_ZFI035C-MENGE.
    GW_ALV-BDMBT = GW_ZFI035C-DMBTR.
    GW_ALV-EMENG = GW_ZFI035C-MENGE.
    GW_ALV-EDMBT = GW_ZFI035C-DMBTR.
    LOOP AT GT_SUM_DATA INTO GW_SUM_DATA
      WHERE MATNR = GW_ZFI035C-MATNR
        AND BUKRS = GW_ZFI035C-BUKRS
        AND WERKS = GW_ZFI035C-WERKS
        AND LGORT = GW_ZFI035C-LGORT
        AND CHARG = GW_ZFI035C-CHARG.
      L_TABIX = SY-TABIX.
*      CASE GW_SUM_DATA-MVGRP.                      "HANDWY
*        WHEN '11'.
*          GW_ALV-IMMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IMDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IMDMB IS NOT INITIAL.
*            GW_ALV-IMAVP = GW_ALV-IMMNG / GW_ALV-IMDMB.
*          ENDIF.
*        WHEN '21'.
*          GW_ALV-IDMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IDDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IDDMB IS NOT INITIAL.
*            GW_ALV-IDAVP = GW_ALV-IDMNG / GW_ALV-IDDMB.
*          ENDIF.
*        WHEN '52'.
*          GW_ALV-IWMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IWDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IWDMB IS NOT INITIAL.
*            GW_ALV-IWAVP = GW_ALV-IWMNG / GW_ALV-IWDMB.
*          ENDIF.
*        WHEN '62'.
*          GW_ALV-IPMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IPDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IPDMB IS NOT INITIAL.
*            GW_ALV-IPAVP = GW_ALV-IPMNG / GW_ALV-IPDMB.
*          ENDIF.
*        WHEN '42'.
*          GW_ALV-IHMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IHDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IHDMB IS NOT INITIAL.
*            GW_ALV-IHAVP = GW_ALV-IHMNG / GW_ALV-IHDMB.
*          ENDIF.
*        WHEN '43'.
*          GW_ALV-ICMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-ICDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-ICDMB IS NOT INITIAL.
*            GW_ALV-ICAVP = GW_ALV-ICMNG / GW_ALV-ICDMB.
*          ENDIF.
*        WHEN '23'.
*          GW_ALV-IGMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IGDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IGDMB IS NOT INITIAL.
*            GW_ALV-IGAVP = GW_ALV-IGMNG / GW_ALV-IGDMB.
*          ENDIF.
*        WHEN '54'.
*          GW_ALV-IJMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IJDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IJDMB IS NOT INITIAL.
*            GW_ALV-IJAVP = GW_ALV-IJMNG / GW_ALV-IJDMB.
*          ENDIF.
*        WHEN '41'.
*          GW_ALV-IRMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IRDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IRDMB IS NOT INITIAL.
*            GW_ALV-IRAVP = GW_ALV-IRMNG / GW_ALV-IRDMB.
*          ENDIF.
*        WHEN '33'.
*          GW_ALV-ILMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-ILDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-ILDMB IS NOT INITIAL.
*            GW_ALV-ILAVP = GW_ALV-ILMNG / GW_ALV-ILDMB.
*          ENDIF.
*        WHEN '61'.
*          GW_ALV-IBMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-IBDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-IBDMB IS NOT INITIAL.
*            GW_ALV-IBAVP = GW_ALV-IBMNG / GW_ALV-IBDMB.
*          ENDIF.
*        WHEN '31'.
*          GW_ALV-ORMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-ORDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-ORDMB IS NOT INITIAL.
*            GW_ALV-ORAVP = GW_ALV-ORMNG / GW_ALV-ORDMB.
*          ENDIF.
*        WHEN '32'.
*          GW_ALV-OYMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OYDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OYDMB IS NOT INITIAL.
*            GW_ALV-OYAVP = GW_ALV-OYMNG / GW_ALV-OYDMB.
*          ENDIF.
*        WHEN '51'.
*          GW_ALV-OXMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OXDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OXDMB IS NOT INITIAL.
*            GW_ALV-OXAVP = GW_ALV-OXMNG / GW_ALV-OXDMB.
*          ENDIF.
*        WHEN '53'.
*          GW_ALV-OWMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OWDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OWDMB IS NOT INITIAL.
*            GW_ALV-OWAVP = GW_ALV-OWMNG / GW_ALV-OWDMB.
*          ENDIF.
*        WHEN '63'.
*          GW_ALV-OPMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OPDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OPDMB IS NOT INITIAL.
*            GW_ALV-OPAVP = GW_ALV-OPMNG / GW_ALV-OPDMB.
*          ENDIF.
*        WHEN '24'.
*          GW_ALV-OFMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OFDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OFDMB IS NOT INITIAL.
*            GW_ALV-OFAVP = GW_ALV-OFMNG / GW_ALV-OFDMB.
*          ENDIF.
*        WHEN '22'.
*          GW_ALV-OGMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OGDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OGDMB IS NOT INITIAL.
*            GW_ALV-OGAVP = GW_ALV-OGMNG / GW_ALV-OGDMB.
*          ENDIF.
*        WHEN '55'.
*          GW_ALV-OJMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OJDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OJDMB IS NOT INITIAL.
*            GW_ALV-OJAVP = GW_ALV-OJMNG / GW_ALV-OJDMB.
*          ENDIF.
*        WHEN '34'.
*          GW_ALV-OLMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OLDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OLDMB IS NOT INITIAL.
*            GW_ALV-OLAVP = GW_ALV-OLMNG / GW_ALV-OLDMB.
*          ENDIF.
*        WHEN '62'.
*          GW_ALV-OBMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-OBDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-OBDMB IS NOT INITIAL.
*            GW_ALV-OBAVP = GW_ALV-OBMNG / GW_ALV-OBDMB.
*          ENDIF.
*        WHEN '20'.
*          GW_ALV-ODMNG = GW_SUM_DATA-MENGE.
*          GW_ALV-ODDMB = GW_SUM_DATA-DMBTR.
*          IF GW_ALV-ODDMB IS NOT INITIAL.
*            GW_ALV-ODAVP = GW_ALV-ODMNG / GW_ALV-ODDMB.
*          ENDIF.
*        WHEN OTHERS.
*      ENDCASE.
      GW_ALV-BWTAR = GW_SUM_DATA-BWTAR.
      GW_ALV-SOBKZ = GW_SUM_DATA-SOBKZ.
      "入库总数
      GW_ALV-SIMNG = GW_ALV-IMMNG
                   + GW_ALV-IDMNG
                   + GW_ALV-IWMNG
                   + GW_ALV-IPMNG
                   + GW_ALV-IHMNG
                   + GW_ALV-ICMNG
                   + GW_ALV-IGMNG
                   + GW_ALV-IJMNG
                   + GW_ALV-IRMNG
                   + GW_ALV-ILMNG
                   + GW_ALV-IBMNG.
      "入库总金额
      GW_ALV-SIDMB = GW_ALV-IMDMB
                   + GW_ALV-IDDMB
                   + GW_ALV-IWDMB
                   + GW_ALV-IPDMB
                   + GW_ALV-IHDMB
                   + GW_ALV-ICDMB
                   + GW_ALV-IGDMB
                   + GW_ALV-IJDMB
                   + GW_ALV-IRDMB
                   + GW_ALV-ILDMB
                   + GW_ALV-IBDMB.
      "出库总数
      GW_ALV-SOMNG = GW_ALV-ORMNG
                   + GW_ALV-OYMNG
                   + GW_ALV-OXMNG
                   + GW_ALV-OWMNG
                   + GW_ALV-OPMNG
                   + GW_ALV-OFMNG
                   + GW_ALV-OGMNG
                   + GW_ALV-OJMNG
                   + GW_ALV-OLMNG
                   + GW_ALV-OBMNG
                   + GW_ALV-ODMNG.
      "出库总金额
      GW_ALV-SODMB = GW_ALV-ORDMB
                   + GW_ALV-OYDMB
                   + GW_ALV-OXDMB
                   + GW_ALV-OWDMB
                   + GW_ALV-OPDMB
                   + GW_ALV-OFDMB
                   + GW_ALV-OGDMB
                   + GW_ALV-OJDMB
                   + GW_ALV-OLDMB
                   + GW_ALV-OBDMB
                   + GW_ALV-ODDMB.
      "期末库存
      GW_ALV-EMENG = GW_ALV-BMENG + GW_ALV-SIMNG + GW_ALV-SOMNG.
      "期末余额
      GW_ALV-EDMBT = GW_ALV-BDMBT + GW_ALV-SIDMB + GW_ALV-SODMB.
      DELETE GT_SUM_DATA INDEX L_TABIX.
    ENDLOOP.
    "ADD BY HAND HM AT 2015/03/16 15:35*****************************START
    CLEAR GW_SUM_MBLNR.
    GW_SUM_MBLNR-MATNR = GW_ALV-MATNR.
    GW_SUM_MBLNR-WERKS = GW_ALV-WERKS.
    IF GW_ALV-SIMNG IS NOT INITIAL.
      GW_SUM_MBLNR-SMENG = GW_ALV-SIMNG.
    ELSE.
      GW_SUM_MBLNR-SMENG = GW_ALV-BMENG.
    ENDIF.
    IF GW_ALV-SOMNG IS NOT INITIAL.
      GW_SUM_MBLNR-EMENG = GW_ALV-SOMNG.
    ELSE.
      GW_SUM_MBLNR-EMENG = GW_ALV-EMENG.
    ENDIF.
    COLLECT GW_SUM_MBLNR INTO GT_SUM_MBLNR.
    "*****************************************************************END
    APPEND GW_ALV TO GT_ALV.
    CLEAR GW_ALV.
  ENDLOOP.
*  CLEAR GT_SUM_MBLNR.
  "根据移动组对应到相应的数量和金额***************************START
  LOOP AT GT_SUM_DATA INTO GW_SUM_DATA.
*    CASE GW_SUM_DATA-MVGRP.             "HANDWY
*      WHEN '11'.
*        GW_ALV-IMMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IMDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IMDMB IS NOT INITIAL.
*          GW_ALV-IMAVP = GW_ALV-IMMNG / GW_ALV-IMDMB.
*        ENDIF.
*      WHEN '21'.
*        GW_ALV-IDMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IDDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IDDMB IS NOT INITIAL.
*          GW_ALV-IDAVP = GW_ALV-IDMNG / GW_ALV-IDDMB.
*        ENDIF.
*      WHEN '52'.
*        GW_ALV-IWMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IWDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IWDMB IS NOT INITIAL.
*          GW_ALV-IWAVP = GW_ALV-IWMNG / GW_ALV-IWDMB.
*        ENDIF.
*      WHEN '62'.
*        GW_ALV-IPMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IPDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IPDMB IS NOT INITIAL.
*          GW_ALV-IPAVP = GW_ALV-IPMNG / GW_ALV-IPDMB.
*        ENDIF.
*      WHEN '42'.
*        GW_ALV-IHMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IHDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IHDMB IS NOT INITIAL.
*          GW_ALV-IHAVP = GW_ALV-IHMNG / GW_ALV-IHDMB.
*        ENDIF.
*      WHEN '43'.
*        GW_ALV-ICMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-ICDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-ICDMB IS NOT INITIAL.
*          GW_ALV-ICAVP = GW_ALV-ICMNG / GW_ALV-ICDMB.
*        ENDIF.
*      WHEN '23'.
*        GW_ALV-IGMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IGDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IGDMB IS NOT INITIAL.
*          GW_ALV-IGAVP = GW_ALV-IGMNG / GW_ALV-IGDMB.
*        ENDIF.
*      WHEN '54'.
*        GW_ALV-IJMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IJDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IJDMB IS NOT INITIAL.
*          GW_ALV-IJAVP = GW_ALV-IJMNG / GW_ALV-IJDMB.
*        ENDIF.
*      WHEN '41'.
*        GW_ALV-IRMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IRDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IRDMB IS NOT INITIAL.
*          GW_ALV-IRAVP = GW_ALV-IRMNG / GW_ALV-IRDMB.
*        ENDIF.
*      WHEN '33'.
*        GW_ALV-ILMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-ILDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-ILDMB IS NOT INITIAL.
*          GW_ALV-ILAVP = GW_ALV-ILMNG / GW_ALV-ILDMB.
*        ENDIF.
*      WHEN '61'.
*        GW_ALV-IBMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-IBDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-IBDMB IS NOT INITIAL.
*          GW_ALV-IBAVP = GW_ALV-IBMNG / GW_ALV-IBDMB.
*        ENDIF.
*      WHEN '31'.
*        GW_ALV-ORMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-ORDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-ORDMB IS NOT INITIAL.
*          GW_ALV-ORAVP = GW_ALV-ORMNG / GW_ALV-ORDMB.
*        ENDIF.
*      WHEN '32'.
*        GW_ALV-OYMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OYDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OYDMB IS NOT INITIAL.
*          GW_ALV-OYAVP = GW_ALV-OYMNG / GW_ALV-OYDMB.
*        ENDIF.
*      WHEN '51'.
*        GW_ALV-OXMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OXDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OXDMB IS NOT INITIAL.
*          GW_ALV-OXAVP = GW_ALV-OXMNG / GW_ALV-OXDMB.
*        ENDIF.
*      WHEN '53'.
*        GW_ALV-OWMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OWDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OWDMB IS NOT INITIAL.
*          GW_ALV-OWAVP = GW_ALV-OWMNG / GW_ALV-OWDMB.
*        ENDIF.
*      WHEN '63'.
*        GW_ALV-OPMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OPDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OPDMB IS NOT INITIAL.
*          GW_ALV-OPAVP = GW_ALV-OPMNG / GW_ALV-OPDMB.
*        ENDIF.
*      WHEN '24'.
*        GW_ALV-OFMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OFDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OFDMB IS NOT INITIAL.
*          GW_ALV-OFAVP = GW_ALV-OFMNG / GW_ALV-OFDMB.
*        ENDIF.
*      WHEN '22'.
*        GW_ALV-OGMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OGDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OGDMB IS NOT INITIAL.
*          GW_ALV-OGAVP = GW_ALV-OGMNG / GW_ALV-OGDMB.
*        ENDIF.
*      WHEN '55'.
*        GW_ALV-OJMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OJDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OJDMB IS NOT INITIAL.
*          GW_ALV-OJAVP = GW_ALV-OJMNG / GW_ALV-OJDMB.
*        ENDIF.
*      WHEN '34'.
*        GW_ALV-OLMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OLDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OLDMB IS NOT INITIAL.
*          GW_ALV-OLAVP = GW_ALV-OLMNG / GW_ALV-OLDMB.
*        ENDIF.
*      WHEN '62'.
*        GW_ALV-OBMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-OBDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-OBDMB IS NOT INITIAL.
*          GW_ALV-OBAVP = GW_ALV-OBMNG / GW_ALV-OBDMB.
*        ENDIF.
*      WHEN '20'.
*        GW_ALV-ODMNG = GW_SUM_DATA-MENGE.
*        GW_ALV-ODDMB = GW_SUM_DATA-DMBTR.
*        IF GW_ALV-ODDMB IS NOT INITIAL.
*          GW_ALV-ODAVP = GW_ALV-ODMNG / GW_ALV-ODDMB.
*        ENDIF.
*      WHEN OTHERS.
*    ENDCASE.
    AT END OF CHARG.
      GW_ALV-MATNR = GW_SUM_DATA-MATNR.
      GW_ALV-MAKTX = GW_SUM_DATA-MAKTX.
      GW_ALV-BUKRS = GW_SUM_DATA-BUKRS.
      GW_ALV-WERKS = GW_SUM_DATA-WERKS.
      GW_ALV-ZGZLX = GW_SUM_DATA-ZGZLX.
      GW_ALV-Z_BAT_WJ = GW_SUM_DATA-Z_BAT_WJ.
      GW_ALV-Z_BAT_BH = GW_SUM_DATA-Z_BAT_BH.
      GW_ALV-KONTS = GW_SUM_DATA-KONTS.
      GW_ALV-TXT50 = GW_SUM_DATA-TXT50.
      GW_ALV-LGORT = GW_SUM_DATA-LGORT.
      GW_ALV-CHARG = GW_SUM_DATA-CHARG.
      GW_ALV-BWTAR = GW_SUM_DATA-BWTAR.
      GW_ALV-SOBKZ = GW_SUM_DATA-SOBKZ.
      "入库总数
      GW_ALV-SIMNG = GW_ALV-IMMNG
                   + GW_ALV-IDMNG
                   + GW_ALV-IWMNG
                   + GW_ALV-IPMNG
                   + GW_ALV-IHMNG
                   + GW_ALV-ICMNG
                   + GW_ALV-IGMNG
                   + GW_ALV-IJMNG
                   + GW_ALV-IRMNG
                   + GW_ALV-ILMNG
                   + GW_ALV-IBMNG.
      "入库总金额
      GW_ALV-SIDMB = GW_ALV-IMDMB
                   + GW_ALV-IDDMB
                   + GW_ALV-IWDMB
                   + GW_ALV-IPDMB
                   + GW_ALV-IHDMB
                   + GW_ALV-ICDMB
                   + GW_ALV-IGDMB
                   + GW_ALV-IJDMB
                   + GW_ALV-IRDMB
                   + GW_ALV-ILDMB
                   + GW_ALV-IBDMB.
      "出库总数
      GW_ALV-SOMNG = GW_ALV-ORMNG
                   + GW_ALV-OYMNG
                   + GW_ALV-OXMNG
                   + GW_ALV-OWMNG
                   + GW_ALV-OPMNG
                   + GW_ALV-OFMNG
                   + GW_ALV-OGMNG
                   + GW_ALV-OJMNG
                   + GW_ALV-OLMNG
                   + GW_ALV-OBMNG
                   + GW_ALV-ODMNG.
      "出库总金额
      GW_ALV-SODMB = GW_ALV-ORDMB
                   + GW_ALV-OYDMB
                   + GW_ALV-OXDMB
                   + GW_ALV-OWDMB
                   + GW_ALV-OPDMB
                   + GW_ALV-OFDMB
                   + GW_ALV-OGDMB
                   + GW_ALV-OJDMB
                   + GW_ALV-OLDMB
                   + GW_ALV-OBDMB
                   + GW_ALV-ODDMB.
      "期末库存
      GW_ALV-EMENG = GW_ALV-BMENG + GW_ALV-SIMNG + GW_ALV-SOMNG.
      "期末余额
      GW_ALV-EDMBT = GW_ALV-BDMBT + GW_ALV-SIDMB + GW_ALV-SODMB.

      "ADD BY HAND HM AT 2015/03/16 15:35*****************************START
      CLEAR GW_SUM_MBLNR.
      GW_SUM_MBLNR-MATNR = GW_ALV-MATNR.
      GW_SUM_MBLNR-WERKS = GW_ALV-WERKS.
      IF GW_ALV-SIMNG IS NOT INITIAL.
        GW_SUM_MBLNR-SMENG = GW_ALV-SIMNG.
      ELSE.
        GW_SUM_MBLNR-SMENG = GW_ALV-BMENG.
      ENDIF.
      IF GW_ALV-SOMNG IS NOT INITIAL.
        GW_SUM_MBLNR-EMENG = GW_ALV-SOMNG.
      ELSE.
        GW_SUM_MBLNR-EMENG = GW_ALV-EMENG.
      ENDIF.
      COLLECT GW_SUM_MBLNR INTO GT_SUM_MBLNR.
      "*****************************************************************END
      APPEND GW_ALV TO GT_ALV.
      CLEAR GW_ALV.
    ENDAT.
  ENDLOOP.
  "****************************************************************END
*CHANGED BY HAND HM AT 2015/03/16 15:39**************************START
*  CLEAR: GT_SUM_MBLNR,GW_SUM_MBLNR.
*  LOOP AT GT_ZFI035P INTO GW_ZFI035P
*    WHERE MBLNR IS NOT INITIAL.
*    GW_SUM_MBLNR-MATNR = GW_ZFI035P-MATNR.
*    GW_SUM_MBLNR-WERKS = GW_ZFI035P-WERKS.
*    IF GW_ZFI035P-MVGRP = '11'
*    OR GW_ZFI035P-MVGRP = '21'
*    OR GW_ZFI035P-MVGRP = '52'
*    OR GW_ZFI035P-MVGRP = '62'
*    OR GW_ZFI035P-MVGRP = '42'
*    OR GW_ZFI035P-MVGRP = '43'
*    OR GW_ZFI035P-MVGRP = '23'
*    OR GW_ZFI035P-MVGRP = '54'
*    OR GW_ZFI035P-MVGRP = '41'
*    OR GW_ZFI035P-MVGRP = '33'.
*      GW_SUM_MBLNR-SMENG = GW_ZFI035P-MENGE.
*    ELSE.
*      GW_SUM_MBLNR-EMENG = GW_ZFI035P-MENGE.
*    ENDIF.
*    COLLECT GW_SUM_MBLNR INTO GT_SUM_MBLNR.
*    CLEAR GW_SUM_MBLNR.
*  ENDLOOP.
*******************************************************************END
  LOOP AT GT_ALV INTO GW_ALV.
    "分摊无物料凭证的库存和金额。
    "按照出入库的数量分摊到入库和出库金额上
    CLEAR GW_SUM_MBLNR.
    READ TABLE GT_SUM_MBLNR INTO GW_SUM_MBLNR WITH KEY
    MATNR = GW_ALV-MATNR
    WERKS = GW_ALV-WERKS.

    GW_ALV_TEMP-MATNR = GW_ALV-MATNR.
    GW_ALV_TEMP-WERKS = GW_ALV-WERKS.
    GW_ALV_TEMP-DMBTR_S = GW_ALV-DMBTR_S.
    GW_ALV_TEMP-DMBTR_H = GW_ALV-DMBTR_H.
    COLLECT GW_ALV_TEMP INTO GT_ALV_TEMP.

    LOOP AT GT_SUM_BELNR INTO GW_SUM_BELNR WHERE MATNR = GW_ALV-MATNR
                                             AND WERKS = GW_ALV-WERKS.
      IF GW_SUM_BELNR-SHKZG = 'S' AND GW_SUM_MBLNR-SMENG IS NOT INITIAL.
        IF GW_ALV-SIMNG IS NOT INITIAL.
          GW_ALV-DMBTR_S = GW_ALV-SIMNG / GW_SUM_MBLNR-SMENG * GW_SUM_BELNR-DMBTR.
        ELSE.
          GW_ALV-DMBTR_S = GW_ALV-BMENG / GW_SUM_MBLNR-SMENG * GW_SUM_BELNR-DMBTR.
        ENDIF.
      ELSEIF GW_SUM_BELNR-SHKZG = 'H' AND GW_SUM_MBLNR-EMENG IS NOT INITIAL.
        IF GW_ALV-SOMNG IS NOT INITIAL.
          GW_ALV-DMBTR_H = GW_ALV-SOMNG / GW_SUM_MBLNR-EMENG * GW_SUM_BELNR-DMBTR.
        ELSE.
          GW_ALV-DMBTR_H = GW_ALV-EMENG / GW_SUM_MBLNR-EMENG * GW_SUM_BELNR-DMBTR.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDLOOP.
  "处理尾差，加到第一行上去
  SORT GT_SUM_BELNR BY MATNR WERKS SHKZG.
  LOOP AT GT_ALV INTO GW_ALV.
    CLEAR: L_S,L_H.
    LOOP AT GT_ALV_TEMP INTO GW_ALV_TEMP WHERE
    MATNR = GW_ALV-MATNR AND
    WERKS = GW_ALV-WERKS.
      L_TABIX = SY-TABIX.
      READ TABLE GT_SUM_BELNR INTO GW_SUM_BELNR WITH KEY
      MATNR = GW_ALV-MATNR
      WERKS = GW_ALV-WERKS
      SHKZG = 'S' BINARY SEARCH.
      IF SY-SUBRC = 0.
        L_S = GW_ALV_TEMP-DMBTR_S - GW_SUM_BELNR-DMBTR.
      ENDIF.

      READ TABLE GT_SUM_BELNR INTO GW_SUM_BELNR WITH KEY
      MATNR = GW_ALV-MATNR
      WERKS = GW_ALV-WERKS
      SHKZG = 'H' BINARY SEARCH.
      IF SY-SUBRC = 0.
        L_H = GW_ALV_TEMP-DMBTR_H - GW_SUM_BELNR-DMBTR.
      ENDIF.

      DELETE GT_ALV_TEMP INDEX L_TABIX.
    ENDLOOP.
    GW_ALV-DMBTR_S = GW_ALV-DMBTR_S - L_S.
    GW_ALV-DMBTR_H = GW_ALV-DMBTR_H - L_H.

    GW_ALV-SIDMB = GW_ALV-SIDMB + GW_ALV-DMBTR_S.
    GW_ALV-SODMB = GW_ALV-SODMB + GW_ALV-DMBTR_H.

    READ TABLE GT_ZFI035K INTO GW_ZFI035K WITH KEY
      MATNR = GW_ALV-MATNR
      WERKS = GW_ALV-WERKS BINARY SEARCH.
    IF SY-SUBRC = 0 AND GW_ALV-BWTAR IS INITIAL.
      IF GW_ZFI035K-SMENG IS NOT INITIAL.
        GW_ALV-BDMBT = GW_ALV-BMENG / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
      ENDIF.
    ENDIF.
    "期末余额
    GW_ALV-EDMBT = GW_ALV-BDMBT + GW_ALV-SIDMB + GW_ALV-SODMB.
    IF GW_ALV-BMENG IS NOT INITIAL.
      GW_ALV-BAVPR = GW_ALV-BDMBT / GW_ALV-BMENG.
    ENDIF.
    IF GW_ALV-EMENG IS NOT INITIAL.
      GW_ALV-EAVPR = GW_ALV-EDMBT / GW_ALV-EMENG.
    ENDIF.
    MODIFY GT_ALV FROM GW_ALV.
    CLEAR GW_ALV.
  ENDLOOP.
*  CLEAR GT_ALV_TEMP.
*  MOVE-CORRESPONDING GT_ALV TO GT_ALV_TEMP.
*  LOOP AT GT_ALV_TEMP.
*    MOVE-CORRESPONDING GW_ALV_TEMP TO GW_ALV.
*    CLEAR GW_ALV-MVGRP.
*    COLLECT GW_ALV INTO GT_ALV.
*  ENDLOOP.
ENDFORM.                    " FRM_DEAL_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_FIELDCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_SET_FIELDCAT .
  CLEAR GT_FIELDCAT.
  IF P_GZ = 'X'.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ZGZLX' '钢种' .
  ENDIF.
  IF P_PC = 'X'.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'CHARG' '批次'.
  ENDIF.
  IF P_WJ = 'X'.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'Z_BAT_WJ' '外径'.
  ENDIF.
  IF P_BH = 'X'.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'Z_BAT_BH' '壁厚'.
  ENDIF.
  IF P_GZ IS INITIAL AND P_WJ IS INITIAL AND P_BH IS INITIAL AND P_PC IS INITIAL.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'MATNR' '物料号'.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'MAKTX' '物料描述'.
    SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'MVGRP' '移动组'.
  ENDIF.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'KONTS' '科目'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'TXT50' '科目描述'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BUKRS' '公司代码'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'WERKS' '工厂'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'LGORT' '仓储位置'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BMENG' '期初数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BAVPR' '期初平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BDMBT' '期初金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SIMNG' '入库总数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SIAVP' '入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SIDMB' '入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'DMBTR_S' '差异分摊（借）'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IMMNG' '采购入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IMAVP' '采购入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IMDMB' '采购入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IDMNG' '调拨入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IDAVP' '调拨入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IDDMB' '调拨入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IWMNG' '委外加工收回数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IWAVP' '委外加工收回平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IWDMB' '委外加工收回金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IPMNG' '盘盈数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IPAVP' '盘盈平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IPDMB' '盘盈金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IHMNG' '生产回收数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IHAVP' '生产回收平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IHDMB' '生产回收金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ICMNG' '成品转入数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ICAVP' '成品转入平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ICDMB' '成品转入金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IGMNG' '改制品转入数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IGAVP' '改制品转入平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IGDMB' '改制品转入金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IJMNG' '受托加工入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IJAVP' '受托加工入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IJDMB' '受托加工入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IRMNG' '生产入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IRAVP' '生产入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IRDMB' '生产入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ILMNG' '加工来料数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ILAVP' '加工来料平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ILDMB' '加工来料金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IBMNG' '期初入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IBAVP' '期初入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IBDMB' '期初入库金额'.

  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SOMNG' '出库总数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SOAVP' '出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SODMB' '出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'DMBTR_H' '差异分摊（贷）'.

  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ODMNG' '调拨出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ODAVP' '调拨出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ODDMB' '调拨出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ORMNG' '生产领用数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ORAVP' '生产领用平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ORDMB' '生产领用金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OYMNG' '部门领用数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OYAVP' '部门领用平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OYDMB' '部门领用金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OXMNG' '销售出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OXAVP' '销售出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OXDMB' '销售出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OWMNG' '委外加工数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OWAVP' '委外加工平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OWDMB' '委外加工金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OPMNG' '盘亏数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OPAVP' '盘亏平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OPDMB' '盘亏金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OFMNG' '报废数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OFAVP' '报废平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OFDMB' '报废金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OGMNG' '转改制品数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OGAVP' '转改制品平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OGDMB' '转改制品金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OJMNG' '受托加工出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OJAVP' '受托加工出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OJDMB' '受托加工出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OLMNG' '加工来料领用数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OLAVP' '加工来料领用平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OLDMB' '加工来料领用金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OBMNG' '期初出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OBAVP' '期初出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OBDMB' '期初出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'EMENG' '期末数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'EAVPR' '期末平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'EDMBT' '期末金额'.
ENDFORM.                    " FRM_SET_FIELDCAT
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_SET_LAYOUT .
  GW_LAYOUT-ZEBRA = 'X'.
  GW_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
  GW_LAYOUT-BOX_FIELDNAME = 'MARK'.
ENDFORM.                    " FRM_SET_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  FRM_ALV_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DISPLAY.
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK        = ' '
*     I_BYPASSING_BUFFER       = ' '
*     I_BUFFER_ACTIVE          = ' '
      I_CALLBACK_PROGRAM       = SY-REPID
      I_CALLBACK_PF_STATUS_SET = 'FRM_PF_STATUS'
      I_CALLBACK_USER_COMMAND  = 'FRM_USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME         =
*     I_BACKGROUND_ID          = ' '
*     I_GRID_TITLE             =
*     I_GRID_SETTINGS          =
      IS_LAYOUT                = GW_LAYOUT
      IT_FIELDCAT              = GT_FIELDCAT
*     IT_EXCLUDING             =
*     IT_SPECIAL_GROUPS        =
*     IT_SORT                  =
*     IT_FILTER                =
*     IS_SEL_HIDE              =
*     I_DEFAULT                = 'X'
      I_SAVE                   = 'U'
*     IS_VARIANT               =
*     IT_EVENTS                =
*     IT_EVENT_EXIT            =
*     IS_PRINT                 =
*     IS_REPREP_ID             =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE        = 0
*     I_HTML_HEIGHT_TOP        = 0
*     I_HTML_HEIGHT_END        = 0
*     IT_ALV_GRAPHICS          =
*     IT_HYPERLINK             =
*     IT_ADD_FIELDCAT          =
*     IT_EXCEPT_QINFO          =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      T_OUTTAB                 = GT_ALV
    EXCEPTIONS
      PROGRAM_ERROR            = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    " FRM_ALV_DISPLAY

FORM FRM_PF_STATUS USING RT_EXTAB TYPE SLIS_T_EXTAB.
  SET PF-STATUS 'PF_STATUS'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_USER_COMMAND USING UCOMM LIKE SY-UCOMM
      RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA: LR_GRID TYPE REF TO CL_GUI_ALV_GRID.
  OK_CODE = UCOMM.
  CASE OK_CODE.
    WHEN '&IC1'.
      READ TABLE GT_ALV INTO GW_ALV INDEX RS_SELFIELD-TABINDEX.
      IF SY-SUBRC = 0.
        PERFORM FRM_SUB_DEAL_DISPLAY USING GW_ALV.
      ENDIF.
  ENDCASE.
  RS_SELFIELD-REFRESH = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA_FROM_SELFTABLE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_GET_DATA_FROM_SELFTABLE .
  SELECT
    MATNR
    BUKRS
    WERKS
    LGORT
    STDAT
    EDDAT
    SMENG
    MEINS
    SDMBT
    WAERS
    EMENG
    EDMBT
    STATU
    FROM ZFI035K
    INTO CORRESPONDING FIELDS OF TABLE GT_ZFI035K
    WHERE MATNR IN S_MATNR
      AND BUKRS IN S_BUKRS
      AND WERKS IN S_WERKS
      AND LGORT IN S_LGORT
      AND STDAT = S_DATUM-LOW
      AND EDDAT = S_DATUM-HIGH.

  SELECT
    MATNR
    BUKRS
    WERKS
    LGORT
    CHARG
    BUDAT
    BELNR
    STDAT
    EDDAT
    MBLNR
    ZEILE
    MENGE
    MEINS
    DMBTR
    WAERS
    BWART
    KZBEW
    SOBKZ
    SHKZG
    ISKGS
    MVGRP
    STATU
    FROM ZFI035P
    INTO CORRESPONDING FIELDS OF TABLE GT_ZFI035P
    WHERE MATNR IN S_MATNR
      AND BUKRS IN S_BUKRS
      AND WERKS IN S_WERKS
      AND LGORT IN S_LGORT
      AND STDAT = S_DATUM-LOW
      AND EDDAT = S_DATUM-HIGH.


ENDFORM.                    " FRM_GET_DATA_FROM_SELFTABLE
*&---------------------------------------------------------------------*
*&      Form  FRM_SUB_DEAL_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GW_ALV  text
*----------------------------------------------------------------------*
FORM FRM_SUB_DEAL_DISPLAY USING P_GW_ALV TYPE TY_ALV.
  CLEAR GT_FIELDCAT.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ZGZLX' '钢种'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'CHARG' '批次'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'Z_BAT_WJ' '外径'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'Z_BAT_BH' '壁厚'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'MATNR' '物料号'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'MAKTX' '物料描述'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BUKRS' '公司代码'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'WERKS' '工厂'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'LGORT' '仓储位置'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BMENG' '期初数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BAVPR' '期初平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'BDMBT' '期初金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SIMNG' '入库总数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SIAVP' '入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SIDMB' '入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IMMNG' '采购入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IMAVP' '采购入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IMDMB' '采购入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IDMNG' '调拨入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IDAVP' '调拨入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IDDMB' '调拨入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IWMNG' '委外加工收回数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IWAVP' '委外加工收回平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IWDMB' '委外加工收回金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IPMNG' '盘盈数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IPAVP' '盘盈平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IPDMB' '盘盈金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IHMNG' '生产回收数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IHAVP' '生产回收平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IHDMB' '生产回收金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ICMNG' '成品转入数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ICAVP' '成品转入平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ICDMB' '成品转入金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IGMNG' '改制品转入数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IGAVP' '改制品转入平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IGDMB' '改制品转入金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IJMNG' '受托加工入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IJAVP' '受托加工入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IJDMB' '受托加工入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IRMNG' '生产入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IRAVP' '生产入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IRDMB' '生产入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ILMNG' '加工来料数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ILAVP' '加工来料平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ILDMB' '加工来料金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IBMNG' '期初入库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IBAVP' '期初入库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'IBDMB' '期初入库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SOMNG' '出库总数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SOAVP' '出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'SODMB' '出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ODMNG' '调拨出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ODAVP' '调拨出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ODDMB' '调拨出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ORMNG' '生产领用数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ORAVP' '生产领用平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'ORDMB' '生产领用金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OYMNG' '部门领用数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OYAVP' '部门领用平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OYDMB' '部门领用金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OXMNG' '销售出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OXAVP' '销售出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OXDMB' '销售出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OWMNG' '委外加工数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OWAVP' '委外加工平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OWDMB' '委外加工金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OPMNG' '盘亏数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OPAVP' '盘亏平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OPDMB' '盘亏金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OFMNG' '报废数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OFAVP' '报废平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OFDMB' '报废金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OGMNG' '转改制品数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OGAVP' '转改制品平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OGDMB' '转改制品金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OJMNG' '受托加工出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OJAVP' '受托加工出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OJDMB' '受托加工出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OLMNG' '加工来料领用数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OLAVP' '加工来料领用平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OLDMB' '加工来料领用金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OBMNG' '期初出库数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OBAVP' '期初出库平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'OBDMB' '期初出库金额'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'EMENG' '期末数量'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'EAVPR' '期末平均单位成本'.
  SET_FIELDCAT GW_FIELDCAT GT_FIELDCAT 'EDMBT' '期末金额'.

  CLEAR GT_SUBALV.
  SORT GT_MAKT BY MATNR.
  LOOP AT GT_ZFI035P INTO GW_ZFI035P.
    IF P_GZ = 'X' AND GW_ZFI035P-ZGZLX <> P_GW_ALV-ZGZLX.
      CONTINUE.
    ENDIF.
    IF P_WJ = 'X' AND GW_ZFI035P-Z_BAT_WJ <> P_GW_ALV-Z_BAT_WJ.
      CONTINUE.
    ENDIF.
    IF P_BH = 'X' AND GW_ZFI035P-Z_BAT_BH <> P_GW_ALV-Z_BAT_BH.
      CONTINUE.
    ENDIF.
    IF P_PC = 'X' AND GW_ZFI035P-CHARG <> P_GW_ALV-CHARG.
      CONTINUE.
    ENDIF.
*    GW_SUBALV-BMENG = GW_ZFI035P-SMENG.
*    GW_SUBALV-BDMBT = GW_ZFI035P-SDMBT.
*    GW_SUBALV-EMENG = GW_ZFI035P-EMENG.
*    GW_SUBALV-EDMBT = GW_ZFI035P-EDMBT.
    CASE GW_ZFI035P-MVGRP.
      WHEN '11'.
        GW_SUBALV-IMMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IMDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IMDMB IS NOT INITIAL.
          GW_SUBALV-IMAVP = GW_SUBALV-IMMNG / GW_SUBALV-IMDMB.
        ENDIF.
      WHEN '21'.
        GW_SUBALV-IDMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IDDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IDDMB IS NOT INITIAL.
          GW_SUBALV-IDAVP = GW_SUBALV-IDMNG / GW_SUBALV-IDDMB.
        ENDIF.
      WHEN '52'.
        GW_SUBALV-IWMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IWDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IWDMB IS NOT INITIAL.
          GW_SUBALV-IWAVP = GW_SUBALV-IWMNG / GW_SUBALV-IWDMB.
        ENDIF.
      WHEN '62'.
        GW_SUBALV-IPMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IPDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IPDMB IS NOT INITIAL.
          GW_SUBALV-IPAVP = GW_SUBALV-IPMNG / GW_SUBALV-IPDMB.
        ENDIF.
      WHEN '42'.
        GW_SUBALV-IHMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IHDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IHDMB IS NOT INITIAL.
          GW_SUBALV-IHAVP = GW_SUBALV-IHMNG / GW_SUBALV-IHDMB.
        ENDIF.
      WHEN '43'.
        GW_SUBALV-ICMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-ICDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-ICDMB IS NOT INITIAL.
          GW_SUBALV-ICAVP = GW_SUBALV-ICMNG / GW_SUBALV-ICDMB.
        ENDIF.
      WHEN '23'.
        GW_SUBALV-IGMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IGDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IGDMB IS NOT INITIAL.
          GW_SUBALV-IGAVP = GW_SUBALV-IGMNG / GW_SUBALV-IGDMB.
        ENDIF.
      WHEN '54'.
        GW_SUBALV-IJMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IJDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IJDMB IS NOT INITIAL.
          GW_SUBALV-IJAVP = GW_SUBALV-IJMNG / GW_SUBALV-IJDMB.
        ENDIF.
      WHEN '41'.
        GW_SUBALV-IRMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IRDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IRDMB IS NOT INITIAL.
          GW_SUBALV-IRAVP = GW_SUBALV-IRMNG / GW_SUBALV-IRDMB.
        ENDIF.
      WHEN '33'.
        GW_SUBALV-ILMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-ILDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-ILDMB IS NOT INITIAL.
          GW_SUBALV-ILAVP = GW_SUBALV-ILMNG / GW_SUBALV-ILDMB.
        ENDIF.
      WHEN '61'.
        GW_SUBALV-IBMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-IBDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-IBDMB IS NOT INITIAL.
          GW_SUBALV-IBAVP = GW_SUBALV-IBMNG / GW_SUBALV-IBDMB.
        ENDIF.
      WHEN '31'.
        GW_SUBALV-ORMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-ORDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-ORDMB IS NOT INITIAL.
          GW_SUBALV-ORAVP = GW_SUBALV-ORMNG / GW_SUBALV-ORDMB.
        ENDIF.
      WHEN '32'.
        GW_SUBALV-OYMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OYDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OYDMB IS NOT INITIAL.
          GW_SUBALV-OYAVP = GW_SUBALV-OYMNG / GW_SUBALV-OYDMB.
        ENDIF.
      WHEN '51'.
        GW_SUBALV-OXMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OXDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OXDMB IS NOT INITIAL.
          GW_SUBALV-OXAVP = GW_SUBALV-OXMNG / GW_SUBALV-OXDMB.
        ENDIF.
      WHEN '53'.
        GW_SUBALV-OWMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OWDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OWDMB IS NOT INITIAL.
          GW_SUBALV-OWAVP = GW_SUBALV-OWMNG / GW_SUBALV-OWDMB.
        ENDIF.
      WHEN '63'.
        GW_SUBALV-OPMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OPDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OPDMB IS NOT INITIAL.
          GW_SUBALV-OPAVP = GW_SUBALV-OPMNG / GW_SUBALV-OPDMB.
        ENDIF.
      WHEN '24'.
        GW_SUBALV-OFMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OFDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OFDMB IS NOT INITIAL.
          GW_SUBALV-OFAVP = GW_SUBALV-OFMNG / GW_SUBALV-OFDMB.
        ENDIF.
      WHEN '22'.
        GW_SUBALV-OGMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OGDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OGDMB IS NOT INITIAL.
          GW_SUBALV-OGAVP = GW_SUBALV-OGMNG / GW_SUBALV-OGDMB.
        ENDIF.
      WHEN '55'.
        GW_SUBALV-OJMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OJDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OJDMB IS NOT INITIAL.
          GW_SUBALV-OJAVP = GW_SUBALV-OJMNG / GW_SUBALV-OJDMB.
        ENDIF.
      WHEN '34'.
        GW_SUBALV-OLMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OLDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OLDMB IS NOT INITIAL.
          GW_SUBALV-OLAVP = GW_SUBALV-OLMNG / GW_SUBALV-OLDMB.
        ENDIF.
      WHEN '62'.
        GW_SUBALV-OBMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-OBDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-OBDMB IS NOT INITIAL.
          GW_SUBALV-OBAVP = GW_SUBALV-OBMNG / GW_SUBALV-OBDMB.
        ENDIF.
      WHEN '20'.
        GW_SUBALV-ODMNG = GW_ZFI035P-MENGE.
        GW_SUBALV-ODDMB = GW_ZFI035P-DMBTR.
        IF GW_SUBALV-ODDMB IS NOT INITIAL.
          GW_SUBALV-ODAVP = GW_SUBALV-ODMNG / GW_SUBALV-ODDMB.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
    AT END OF SOBKZ.
      GW_SUBALV-MATNR = GW_ZFI035P-MATNR.
      READ TABLE GT_MAKT INTO GW_MAKT WITH KEY
      MATNR = GW_SUBALV-MATNR BINARY SEARCH.
      IF SY-SUBRC = 0.
        GW_SUBALV-MAKTX = GW_MAKT-MAKTX.
      ENDIF.
      GW_SUBALV-ZGZLX = GW_ZFI035P-ZGZLX.
      GW_SUBALV-Z_BAT_WJ = GW_ZFI035P-Z_BAT_WJ.
      GW_SUBALV-Z_BAT_BH = GW_ZFI035P-Z_BAT_BH.
      GW_SUBALV-BUKRS = GW_ZFI035P-BUKRS.
      GW_SUBALV-WERKS = GW_ZFI035P-WERKS.
      GW_SUBALV-LGORT = GW_ZFI035P-LGORT.
      GW_SUBALV-CHARG = GW_ZFI035P-CHARG.
*      GW_SUBALV-MVGRP = GW_ZFI035P-MVGRP.  "HANDWY
      GW_SUBALV-SOBKZ = GW_ZFI035P-SOBKZ.

      READ TABLE GT_ZFI035K INTO GW_ZFI035K WITH KEY
      MATNR = GW_SUBALV-MATNR
      WERKS = GW_SUBALV-WERKS.
      IF SY-SUBRC = 0.
        IF GW_ZFI035K-SMENG IS NOT INITIAL.
          GW_SUBALV-BDMBT = GW_SUBALV-BMENG / GW_ZFI035K-SMENG * GW_ZFI035K-SDMBT.
          IF GW_SUBALV-BMENG IS NOT INITIAL.
            GW_SUBALV-BAVPR = GW_SUBALV-BDMBT / GW_SUBALV-BMENG.
          ENDIF.
        ENDIF.
        IF GW_ZFI035K-EMENG IS NOT INITIAL.
          GW_SUBALV-EDMBT = GW_SUBALV-EMENG / GW_ZFI035K-EMENG * GW_ZFI035K-EDMBT.
          IF GW_SUBALV-BMENG IS NOT INITIAL.
            GW_SUBALV-EAVPR = GW_SUBALV-EDMBT / GW_SUBALV-EMENG.
          ENDIF.
        ENDIF.
      ENDIF.

      APPEND GW_SUBALV TO GT_SUBALV.
      CLEAR GW_SUBALV.
    ENDAT.
  ENDLOOP.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK  = ' '
*     I_BYPASSING_BUFFER = ' '
*     I_BUFFER_ACTIVE    = ' '
      I_CALLBACK_PROGRAM = SY-REPID
*     I_CALLBACK_PF_STATUS_SET = 'FRM_PF_STATUS'
*     I_CALLBACK_USER_COMMAND  = 'FRM_USER_COMMAND'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME   =
*     I_BACKGROUND_ID    = ' '
*     I_GRID_TITLE       =
*     I_GRID_SETTINGS    =
      IS_LAYOUT          = GW_LAYOUT
      IT_FIELDCAT        = GT_FIELDCAT
*     IT_EXCLUDING       =
*     IT_SPECIAL_GROUPS  =
*     IT_SORT            =
*     IT_FILTER          =
*     IS_SEL_HIDE        =
*     I_DEFAULT          = 'X'
      I_SAVE             = 'U'
*     IS_VARIANT         =
*     IT_EVENTS          =
*     IT_EVENT_EXIT      =
*     IS_PRINT           =
*     IS_REPREP_ID       =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE  = 0
*     I_HTML_HEIGHT_TOP  = 0
*     I_HTML_HEIGHT_END  = 0
*     IT_ALV_GRAPHICS    =
*     IT_HYPERLINK       =
*     IT_ADD_FIELDCAT    =
*     IT_EXCEPT_QINFO    =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      T_OUTTAB           = GT_SUBALV
    EXCEPTIONS
      PROGRAM_ERROR      = 1
      OTHERS             = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.
ENDFORM.                    " FRM_SUB_DEAL_DISPLAY
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_FIELDCAT_K
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_SET_FIELDCAT_K .
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'KONTS' '科目'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'TXT50' '科目描述'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'MATNR' '物料'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'MAKTX' '物料描述'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'WERKS' '工厂'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'SMENG' '期初数量'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'MEINS' '单位'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'SDMBT' '期初金额'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'WAERS' '货币'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'IMENG' '期间入库总数'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'IDMBT' '期间入库总金额'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'OMENG' '期间出库总数'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'ODMBT' '期间出库总金额'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'EMENG' '期末数量'.
  SET_FIELDCAT GW_FIELDCAT_K GT_FIELDCAT_K  'EDMBT' '期末金额'.
ENDFORM.                    " FRM_SET_FIELDCAT_K
*&---------------------------------------------------------------------*
*&      Form  FRM_ALV_DISPLAY_K
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ALV_DISPLAY_K .

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK        = ' '
*     I_BYPASSING_BUFFER       = ' '
*     I_BUFFER_ACTIVE          = ' '
      I_CALLBACK_PROGRAM       = SY-REPID
      I_CALLBACK_PF_STATUS_SET = 'FRM_SET_STATUS_K'
      I_CALLBACK_USER_COMMAND  = 'FRM_USER_COMMAND_K'
*     I_CALLBACK_TOP_OF_PAGE   = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME         =
*     I_BACKGROUND_ID          = ' '
*     I_GRID_TITLE             =
*     I_GRID_SETTINGS          =
      IS_LAYOUT                = GW_LAYOUT_K
      IT_FIELDCAT              = GT_FIELDCAT_K
*     IT_EXCLUDING             =
*     IT_SPECIAL_GROUPS        =
*     IT_SORT                  =
*     IT_FILTER                =
*     IS_SEL_HIDE              =
*     I_DEFAULT                = 'X'
*     I_SAVE                   = ' '
*     IS_VARIANT               =
*     IT_EVENTS                =
*     IT_EVENT_EXIT            =
*     IS_PRINT                 =
*     IS_REPREP_ID             =
*     I_SCREEN_START_COLUMN    = 0
*     I_SCREEN_START_LINE      = 0
*     I_SCREEN_END_COLUMN      = 0
*     I_SCREEN_END_LINE        = 0
*     I_HTML_HEIGHT_TOP        = 0
*     I_HTML_HEIGHT_END        = 0
*     IT_ALV_GRAPHICS          =
*     IT_HYPERLINK             =
*     IT_ADD_FIELDCAT          =
*     IT_EXCEPT_QINFO          =
*     IR_SALV_FULLSCREEN_ADAPTER        =
*   IMPORTING
*     E_EXIT_CAUSED_BY_CALLER  =
*     ES_EXIT_CAUSED_BY_USER   =
    TABLES
      T_OUTTAB                 = GT_ZFI035K
    EXCEPTIONS
      PROGRAM_ERROR            = 1
      OTHERS                   = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    " FRM_ALV_DISPLAY_K


FORM FRM_SET_STATUS_K USING RT_EXTAB TYPE SLIS_T_EXTAB.
  SET PF-STATUS 'PF_STATUS_K'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_USER_COMMAND
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_USER_COMMAND_K USING UCOMM LIKE SY-UCOMM
      RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA: LR_GRID TYPE REF TO CL_GUI_ALV_GRID.
  OK_CODE = UCOMM.
  CASE OK_CODE.
    WHEN 'SUB'.
      PERFORM FRM_DEAL_DATA.
      PERFORM FRM_SET_FIELDCAT.
      PERFORM FRM_SET_LAYOUT.
      PERFORM FRM_ALV_DISPLAY.
  ENDCASE.
  RS_SELFIELD-REFRESH = 'X'.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FRM_DEAL_DATA_K
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_DEAL_DATA_K .
  SORT GT_T156 BY BWART.
  "汇总借贷数量和金额
  LOOP AT GT_ZFI035P INTO GW_ZFI035P.
    CLEAR: GW_ZFI035K_SUM,GW_T156.
    IF GW_ZFI035P-LGORT NOT IN S_LGORT.
      DELETE TABLE GT_ZFI035P FROM GW_ZFI035P.
      CONTINUE.
    ENDIF.
    GW_ZFI035K_SUM-MATNR = GW_ZFI035P-MATNR.
    GW_ZFI035K_SUM-WERKS = GW_ZFI035P-WERKS.
    GW_ZFI035K_SUM-KONTS = GW_ZFI035P-KONTS.
    GW_ZFI035K_SUM-TXT50 = GW_ZFI035P-TXT50.
    READ TABLE GT_T156 INTO GW_T156 WITH KEY
    BWART = GW_ZFI035P-BWART BINARY SEARCH.
    IF ( GW_ZFI035P-SHKZG = 'S' AND GW_T156-XSTBW <> 'X' )
    OR ( GW_ZFI035P-SHKZG = 'H' AND GW_T156-XSTBW = 'X').
      GW_ZFI035K_SUM-IMENG = GW_ZFI035P-MENGE.
      GW_ZFI035K_SUM-IDMBT = GW_ZFI035P-DMBTR.
    ELSEIF ( GW_ZFI035P-SHKZG = 'H' AND GW_T156-XSTBW <> 'X' )
    OR ( GW_ZFI035P-SHKZG = 'S' AND GW_T156-XSTBW = 'X').
      GW_ZFI035K_SUM-OMENG = GW_ZFI035P-MENGE.
      GW_ZFI035K_SUM-ODMBT = GW_ZFI035P-DMBTR.
    ELSE.
      IF GW_ZFI035P-SHKZG = 'S'.
        GW_ZFI035K_SUM-IMENG = GW_ZFI035P-MENGE.
        GW_ZFI035K_SUM-IDMBT = GW_ZFI035P-DMBTR.
      ELSE.
        GW_ZFI035K_SUM-OMENG = GW_ZFI035P-MENGE.
        GW_ZFI035K_SUM-ODMBT = GW_ZFI035P-DMBTR.
      ENDIF.
    ENDIF.
    COLLECT GW_ZFI035K_SUM INTO GT_ZFI035K_SUM.
  ENDLOOP.
  "更新汇总表中的借贷数量和金额
  SORT GT_ZFI035K_SUM BY MATNR WERKS.
  LOOP AT GT_ZFI035K INTO GW_ZFI035K.
    CLEAR GW_ZFI035K_SUM.
    READ TABLE GT_ZFI035K_SUM INTO GW_ZFI035K_SUM WITH KEY
    MATNR = GW_ZFI035K-MATNR
    WERKS = GW_ZFI035K-WERKS BINARY SEARCH.
    IF SY-SUBRC = 0.
      GW_ZFI035K-IMENG = GW_ZFI035K_SUM-IMENG.
      GW_ZFI035K-IDMBT = GW_ZFI035K_SUM-IDMBT.
      GW_ZFI035K-OMENG = GW_ZFI035K_SUM-OMENG * -1.
      GW_ZFI035K-ODMBT = GW_ZFI035K_SUM-ODMBT * -1.
    ENDIF.
    MODIFY GT_ZFI035K FROM GW_ZFI035K.
  ENDLOOP.
ENDFORM.                    " FRM_DEAL_DATA_K
